
FrequencyGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001b68  00001bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  0080013e  0080013e  00001c3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017bd  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a88  00000000  00000000  000035c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef7  00000000  00000000  0000404d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006af  00000000  00000000  00005270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d2d  00000000  00000000  0000591f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000664c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e8 e6       	ldi	r30, 0x68	; 104
     17e:	fb e1       	ldi	r31, 0x1B	; 27
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ae 33       	cpi	r26, 0x3E	; 62
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	ae e3       	ldi	r26, 0x3E	; 62
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a4 3a       	cpi	r26, 0xA4	; 164
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 ef 04 	call	0x9de	; 0x9de <main>
     1a0:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     1a8:	58 9a       	sbi	0x0b, 0	; 11
     1aa:	00 00       	nop
     1ac:	58 98       	cbi	0x0b, 0	; 11
     1ae:	08 95       	ret

000001b0 <lcd_write>:
     1b0:	cf 93       	push	r28
     1b2:	c8 2f       	mov	r28, r24
     1b4:	66 23       	and	r22, r22
     1b6:	11 f0       	breq	.+4      	; 0x1bc <lcd_write+0xc>
     1b8:	59 9a       	sbi	0x0b, 1	; 11
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <lcd_write+0xe>
     1bc:	59 98       	cbi	0x0b, 1	; 11
     1be:	2d 98       	cbi	0x05, 5	; 5
     1c0:	3d 9a       	sbi	0x07, 5	; 7
     1c2:	3c 9a       	sbi	0x07, 4	; 7
     1c4:	3b 9a       	sbi	0x07, 3	; 7
     1c6:	3a 9a       	sbi	0x07, 2	; 7
     1c8:	42 98       	cbi	0x08, 2	; 8
     1ca:	43 98       	cbi	0x08, 3	; 8
     1cc:	44 98       	cbi	0x08, 4	; 8
     1ce:	45 98       	cbi	0x08, 5	; 8
     1d0:	cc 23       	and	r28, r28
     1d2:	0c f4       	brge	.+2      	; 0x1d6 <lcd_write+0x26>
     1d4:	42 9a       	sbi	0x08, 2	; 8
     1d6:	c6 fd       	sbrc	r28, 6
     1d8:	43 9a       	sbi	0x08, 3	; 8
     1da:	c5 fd       	sbrc	r28, 5
     1dc:	44 9a       	sbi	0x08, 4	; 8
     1de:	c4 fd       	sbrc	r28, 4
     1e0:	45 9a       	sbi	0x08, 5	; 8
     1e2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     1e6:	42 98       	cbi	0x08, 2	; 8
     1e8:	43 98       	cbi	0x08, 3	; 8
     1ea:	44 98       	cbi	0x08, 4	; 8
     1ec:	45 98       	cbi	0x08, 5	; 8
     1ee:	c3 fd       	sbrc	r28, 3
     1f0:	42 9a       	sbi	0x08, 2	; 8
     1f2:	c2 fd       	sbrc	r28, 2
     1f4:	43 9a       	sbi	0x08, 3	; 8
     1f6:	c1 fd       	sbrc	r28, 1
     1f8:	44 9a       	sbi	0x08, 4	; 8
     1fa:	c0 fd       	sbrc	r28, 0
     1fc:	45 9a       	sbi	0x08, 5	; 8
     1fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     202:	45 9a       	sbi	0x08, 5	; 8
     204:	44 9a       	sbi	0x08, 4	; 8
     206:	43 9a       	sbi	0x08, 3	; 8
     208:	42 9a       	sbi	0x08, 2	; 8
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <lcd_read>:
     20e:	88 23       	and	r24, r24
     210:	11 f0       	breq	.+4      	; 0x216 <lcd_read+0x8>
     212:	59 9a       	sbi	0x0b, 1	; 11
     214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_read+0xa>
     216:	59 98       	cbi	0x0b, 1	; 11
     218:	2d 9a       	sbi	0x05, 5	; 5
     21a:	3d 98       	cbi	0x07, 5	; 7
     21c:	3c 98       	cbi	0x07, 4	; 7
     21e:	3b 98       	cbi	0x07, 3	; 7
     220:	3a 98       	cbi	0x07, 2	; 7
     222:	58 9a       	sbi	0x0b, 0	; 11
     224:	00 00       	nop
     226:	35 9b       	sbis	0x06, 5	; 6
     228:	02 c0       	rjmp	.+4      	; 0x22e <lcd_read+0x20>
     22a:	80 e1       	ldi	r24, 0x10	; 16
     22c:	01 c0       	rjmp	.+2      	; 0x230 <lcd_read+0x22>
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	34 99       	sbic	0x06, 4	; 6
     232:	80 62       	ori	r24, 0x20	; 32
     234:	33 99       	sbic	0x06, 3	; 6
     236:	80 64       	ori	r24, 0x40	; 64
     238:	32 99       	sbic	0x06, 2	; 6
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	58 98       	cbi	0x0b, 0	; 11
     23e:	00 00       	nop
     240:	58 9a       	sbi	0x0b, 0	; 11
     242:	00 00       	nop
     244:	35 99       	sbic	0x06, 5	; 6
     246:	81 60       	ori	r24, 0x01	; 1
     248:	34 99       	sbic	0x06, 4	; 6
     24a:	82 60       	ori	r24, 0x02	; 2
     24c:	33 99       	sbic	0x06, 3	; 6
     24e:	84 60       	ori	r24, 0x04	; 4
     250:	32 99       	sbic	0x06, 2	; 6
     252:	88 60       	ori	r24, 0x08	; 8
     254:	58 98       	cbi	0x0b, 0	; 11
     256:	08 95       	ret

00000258 <lcd_waitbusy>:
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_read>
     25e:	88 23       	and	r24, r24
     260:	dc f3       	brlt	.-10     	; 0x258 <lcd_waitbusy>
     262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_waitbusy+0xc>
     264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_waitbusy+0xe>
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_read>
     26c:	08 95       	ret

0000026e <lcd_command>:
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24
     272:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_waitbusy>
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	8c 2f       	mov	r24, r28
     27a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_write>
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <lcd_gotoxy>:
     282:	61 11       	cpse	r22, r1
     284:	04 c0       	rjmp	.+8      	; 0x28e <lcd_gotoxy+0xc>
     286:	80 58       	subi	r24, 0x80	; 128
     288:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
     28c:	08 95       	ret
     28e:	80 54       	subi	r24, 0x40	; 64
     290:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
     294:	08 95       	ret

00000296 <lcd_clrscr>:
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
     29c:	08 95       	ret

0000029e <lcd_putc>:
     29e:	cf 93       	push	r28
     2a0:	c8 2f       	mov	r28, r24
     2a2:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_waitbusy>
     2a6:	ca 30       	cpi	r28, 0x0A	; 10
     2a8:	49 f4       	brne	.+18     	; 0x2bc <lcd_putc+0x1e>
     2aa:	80 34       	cpi	r24, 0x40	; 64
     2ac:	10 f0       	brcs	.+4      	; 0x2b2 <lcd_putc+0x14>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <lcd_putc+0x16>
     2b2:	80 e4       	ldi	r24, 0x40	; 64
     2b4:	80 58       	subi	r24, 0x80	; 128
     2b6:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
     2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <lcd_putc+0x26>
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	8c 2f       	mov	r24, r28
     2c0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_write>
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <lcd_puts>:
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	ec 01       	movw	r28, r24
     2ce:	21 96       	adiw	r28, 0x01	; 1
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	88 23       	and	r24, r24
     2d6:	29 f0       	breq	.+10     	; 0x2e2 <lcd_puts+0x1a>
     2d8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_putc>
     2dc:	89 91       	ld	r24, Y+
     2de:	81 11       	cpse	r24, r1
     2e0:	fb cf       	rjmp	.-10     	; 0x2d8 <lcd_puts+0x10>
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     2e8:	cf 93       	push	r28
     2ea:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     2ec:	51 9a       	sbi	0x0a, 1	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     2ee:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     2f0:	50 9a       	sbi	0x0a, 0	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     2f2:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     2f4:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     2f6:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     2f8:	3a 9a       	sbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	8f e9       	ldi	r24, 0x9F	; 159
     2fc:	9f e0       	ldi	r25, 0x0F	; 15
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_init+0x16>
     302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_init+0x1c>
     304:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     306:	44 9a       	sbi	0x08, 4	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     308:	45 9a       	sbi	0x08, 5	; 8
    lcd_e_toggle();
     30a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     30e:	81 ee       	ldi	r24, 0xE1	; 225
     310:	94 e0       	ldi	r25, 0x04	; 4
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <lcd_init+0x2a>
     316:	00 c0       	rjmp	.+0      	; 0x318 <lcd_init+0x30>
     318:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     31a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     31e:	95 e1       	ldi	r25, 0x15	; 21
     320:	9a 95       	dec	r25
     322:	f1 f7       	brne	.-4      	; 0x320 <lcd_init+0x38>
     324:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     326:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     32a:	85 e1       	ldi	r24, 0x15	; 21
     32c:	8a 95       	dec	r24
     32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_init+0x44>
     330:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     332:	45 98       	cbi	0x08, 5	; 8
    lcd_e_toggle();
     334:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     338:	95 e1       	ldi	r25, 0x15	; 21
     33a:	9a 95       	dec	r25
     33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_init+0x52>
     33e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     340:	88 e2       	ldi	r24, 0x28	; 40
     342:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     346:	88 e0       	ldi	r24, 0x08	; 8
     348:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
    lcd_clrscr();                           /* display clear                */
     34c:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     350:	86 e0       	ldi	r24, 0x06	; 6
     352:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     356:	8c 2f       	mov	r24, r28
     358:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>

}/* lcd_init */
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <pollButtons>:
	#endif
}

 void pollButtons()			// both buttons are active low												// TODO: maybe enable mode-change when in hold mode
 {
	if (bothPressed)		// both buttons were pressed previously
     360:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <bothPressed>
     364:	88 23       	and	r24, r24
     366:	79 f0       	breq	.+30     	; 0x386 <pollButtons+0x26>
	{
		if((PIND & (1<<PIND2)) && (PIND & (1<<PIND3)))		// both buttons released
     368:	4a 9b       	sbis	0x09, 2	; 9
     36a:	98 c0       	rjmp	.+304    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     36c:	4b 9b       	sbis	0x09, 3	; 9
     36e:	96 c0       	rjmp	.+300    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		{
			bothPressed = 0;
     370:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <bothPressed>
			btn0Pressed = 0;
     374:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <btn0Pressed>
			btn1Pressed = 0;
     378:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <btn1Pressed>
			btn0DownCycles = 0;
     37c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <btn0DownCycles>
			btn1DownCycles = 0;
     380:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <btn1DownCycles>
     384:	08 95       	ret
		}
		return;
	}
	if (!((PIND & (1<<PIND2)) || (PIND & (1<<PIND3))))			// both buttons pressed
     386:	4a 99       	sbic	0x09, 2	; 9
     388:	84 c0       	rjmp	.+264    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     38a:	4b 99       	sbic	0x09, 3	; 9
     38c:	82 c0       	rjmp	.+260    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	{
		if(!bothPressed)
		{
			hold = 1-hold;			//toggle hold state
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <hold>
     394:	28 2f       	mov	r18, r24
     396:	29 1b       	sub	r18, r25
     398:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <hold>
		}
		bothPressed = 1;
     39c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <bothPressed>
		btn0DownCycles = 0;
     3a0:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <btn0DownCycles>
		btn1DownCycles = 0;
     3a4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <btn1DownCycles>
		return;
     3a8:	08 95       	ret
	}

	if(!hold && !bothPressed)
	{
		if (btn0Pressed)
     3aa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <btn0Pressed>
     3ae:	88 23       	and	r24, r24
     3b0:	99 f1       	breq	.+102    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		{
			if(PIND & (1<<PIND2))		// Button 0 released
     3b2:	4a 9b       	sbis	0x09, 2	; 9
     3b4:	29 c0       	rjmp	.+82     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			{
				if (btn0DownCycles<HOLD_DOWN_CYCLES) // & Button 0 not pressed longer than 1sec
     3b6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <btn0DownCycles>
     3ba:	84 36       	cpi	r24, 0x64	; 100
     3bc:	68 f4       	brcc	.+26     	; 0x3d8 <pollButtons+0x78>
				{
					if(presc > 1)
     3be:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <presc>
     3c2:	82 30       	cpi	r24, 0x02	; 2
     3c4:	28 f0       	brcs	.+10     	; 0x3d0 <pollButtons+0x70>
						presc--;
     3c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <presc>
     3ca:	81 50       	subi	r24, 0x01	; 1
     3cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <presc>
					valuesChanged = 1;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     3d6:	13 c0       	rjmp	.+38     	; 0x3fe <pollButtons+0x9e>
				}
				else
				{
					if(STATE >= STATE_LAST)
     3d8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <STATE>
     3dc:	84 30       	cpi	r24, 0x04	; 4
     3de:	20 f0       	brcs	.+8      	; 0x3e8 <pollButtons+0x88>
					{
						STATE = STATE_LAST-1;
					}
					STATE--;					// Set STATE to the previous one
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STATE>
     3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <pollButtons+0x98>
     3e8:	81 50       	subi	r24, 0x01	; 1
					if(STATE == STATE_OFF)		// Prevent underflow
     3ea:	19 f0       	breq	.+6      	; 0x3f2 <pollButtons+0x92>
				{
					if(STATE >= STATE_LAST)
					{
						STATE = STATE_LAST-1;
					}
					STATE--;					// Set STATE to the previous one
     3ec:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STATE>
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <pollButtons+0x98>
					if(STATE == STATE_OFF)		// Prevent underflow
						STATE = STATE_LAST-1;	//
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STATE>
					stateChanged = 1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <stateChanged>
					//valuesChanged = 1;		// Uncomment this to enable immediate update of values after mode has changed
				}
				btn0Pressed = 0;
     3fe:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <btn0Pressed>
				btn0DownCycles = 0;
     402:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <btn0DownCycles>
     406:	0d c0       	rjmp	.+26     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			}
			else
			{
				if(btn0DownCycles<HOLD_DOWN_CYCLES)			// cap off at 100
     408:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <btn0DownCycles>
     40c:	84 36       	cpi	r24, 0x64	; 100
     40e:	48 f4       	brcc	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
					btn0DownCycles++;
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <btn0DownCycles>
     416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			}
		}
		else if (!(PIND & (1<<PIND2)))
     418:	4a 99       	sbic	0x09, 2	; 9
     41a:	03 c0       	rjmp	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			btn0Pressed = 1;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <btn0Pressed>
		}

		if (btn1Pressed)
     422:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <btn1Pressed>
     426:	88 23       	and	r24, r24
     428:	71 f1       	breq	.+92     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		{
			if (PIND & (1<<PIND3))
     42a:	4b 9b       	sbis	0x09, 3	; 9
     42c:	24 c0       	rjmp	.+72     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			{
				if (btn1DownCycles<HOLD_DOWN_CYCLES)
     42e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <btn1DownCycles>
     432:	84 36       	cpi	r24, 0x64	; 100
     434:	68 f4       	brcc	.+26     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
				{
					if(presc < 5)
     436:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <presc>
     43a:	85 30       	cpi	r24, 0x05	; 5
     43c:	28 f4       	brcc	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
						presc++;
     43e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <presc>
     442:	8f 5f       	subi	r24, 0xFF	; 255
     444:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <presc>
					valuesChanged = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     44e:	0e c0       	rjmp	.+28     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
				}
				else
				{
					STATE++;					// Set STATE to the next one
     450:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <STATE>
     454:	8f 5f       	subi	r24, 0xFF	; 255
					if(STATE == STATE_LAST)		// Prevent overflow
     456:	84 30       	cpi	r24, 0x04	; 4
     458:	19 f0       	breq	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
						presc++;
					valuesChanged = 1;
				}
				else
				{
					STATE++;					// Set STATE to the next one
     45a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STATE>
     45e:	03 c0       	rjmp	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
					if(STATE == STATE_LAST)		// Prevent overflow
						STATE = STATE_OFF+1;
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STATE>
					stateChanged = 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <stateChanged>
					//valuesChanged = 1;		// Uncomment this to enable immediate update of values after mode has changed
				}
				btn1Pressed = 0;
     46c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <btn1Pressed>
				btn1DownCycles = 0;
     470:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <btn1DownCycles>
     474:	08 95       	ret
			}
			else
			{
				if(btn1DownCycles<HOLD_DOWN_CYCLES)
     476:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <btn1DownCycles>
     47a:	84 36       	cpi	r24, 0x64	; 100
     47c:	78 f4       	brcc	.+30     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
					btn1DownCycles++;
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <btn1DownCycles>
     484:	08 95       	ret
			}
		}
		else if (!(PIND & (1<<PIND3)))
     486:	4b 99       	sbic	0x09, 3	; 9
     488:	09 c0       	rjmp	.+18     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			btn1Pressed = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <btn1Pressed>
     490:	08 95       	ret
		btn0DownCycles = 0;
		btn1DownCycles = 0;
		return;
	}

	if(!hold && !bothPressed)
     492:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hold>
     496:	88 23       	and	r24, r24
     498:	09 f4       	brne	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49a:	87 cf       	rjmp	.-242    	; 0x3aa <pollButtons+0x4a>
     49c:	08 95       	ret

0000049e <getPrescS>:
		valuesChanged = 1;
	}
}

 char *getPrescS(char *dest)
 {
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	ec 01       	movw	r28, r24
	switch(presc)
     4a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <presc>
     4a8:	93 30       	cpi	r25, 0x03	; 3
     4aa:	a9 f0       	breq	.+42     	; 0x4d6 <getPrescS+0x38>
     4ac:	28 f4       	brcc	.+10     	; 0x4b8 <getPrescS+0x1a>
     4ae:	91 30       	cpi	r25, 0x01	; 1
     4b0:	41 f0       	breq	.+16     	; 0x4c2 <getPrescS+0x24>
     4b2:	92 30       	cpi	r25, 0x02	; 2
     4b4:	59 f0       	breq	.+22     	; 0x4cc <getPrescS+0x2e>
     4b6:	26 c0       	rjmp	.+76     	; 0x504 <getPrescS+0x66>
     4b8:	94 30       	cpi	r25, 0x04	; 4
     4ba:	99 f0       	breq	.+38     	; 0x4e2 <getPrescS+0x44>
     4bc:	95 30       	cpi	r25, 0x05	; 5
     4be:	d1 f0       	breq	.+52     	; 0x4f4 <getPrescS+0x56>
     4c0:	21 c0       	rjmp	.+66     	; 0x504 <getPrescS+0x66>
	{
	case 1:
	{
		strcpy(dest, "1");
     4c2:	81 e3       	ldi	r24, 0x31	; 49
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	99 83       	std	Y+1, r25	; 0x01
     4c8:	88 83       	st	Y, r24
		break;
     4ca:	1c c0       	rjmp	.+56     	; 0x504 <getPrescS+0x66>
	}
	case 2:
	{
		strcpy(dest, "8");
     4cc:	88 e3       	ldi	r24, 0x38	; 56
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	99 83       	std	Y+1, r25	; 0x01
     4d2:	88 83       	st	Y, r24
		break;
     4d4:	17 c0       	rjmp	.+46     	; 0x504 <getPrescS+0x66>
	}
	case 3:
	{
		strcpy(dest, "64");
     4d6:	86 e3       	ldi	r24, 0x36	; 54
     4d8:	94 e3       	ldi	r25, 0x34	; 52
     4da:	99 83       	std	Y+1, r25	; 0x01
     4dc:	88 83       	st	Y, r24
     4de:	1a 82       	std	Y+2, r1	; 0x02
		break;
     4e0:	11 c0       	rjmp	.+34     	; 0x504 <getPrescS+0x66>
	}
	case 4:
	{
		strcpy(dest, "256");
     4e2:	82 e3       	ldi	r24, 0x32	; 50
     4e4:	95 e3       	ldi	r25, 0x35	; 53
     4e6:	99 83       	std	Y+1, r25	; 0x01
     4e8:	88 83       	st	Y, r24
     4ea:	86 e3       	ldi	r24, 0x36	; 54
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	9b 83       	std	Y+3, r25	; 0x03
     4f0:	8a 83       	std	Y+2, r24	; 0x02
		break;
     4f2:	08 c0       	rjmp	.+16     	; 0x504 <getPrescS+0x66>
	}
	case 5:
	{
		strcpy(dest, "1024");
     4f4:	85 e0       	ldi	r24, 0x05	; 5
     4f6:	e2 e0       	ldi	r30, 0x02	; 2
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
     4fa:	de 01       	movw	r26, r28
     4fc:	01 90       	ld	r0, Z+
     4fe:	0d 92       	st	X+, r0
     500:	8a 95       	dec	r24
     502:	e1 f7       	brne	.-8      	; 0x4fc <getPrescS+0x5e>
		break;
	}
	}
	return dest;
 }
     504:	ce 01       	movw	r24, r28
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <appendPercentAndTrim>:
	 str[getIndexOfLastDigit(str) + 1] = '\0';	// trim ending zeroes
	 return str;
 }

 char *appendPercentAndTrim(char *str)
 {
     50c:	dc 01       	movw	r26, r24
	 uint8_t i;
	 for (i=0; i<strlen(str); i++)
     50e:	fc 01       	movw	r30, r24
     510:	01 90       	ld	r0, Z+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <appendPercentAndTrim+0x4>
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	af 01       	movw	r20, r30
     51a:	48 1b       	sub	r20, r24
     51c:	59 0b       	sbc	r21, r25
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0c c0       	rjmp	.+24     	; 0x53a <appendPercentAndTrim+0x2e>
	 {
		 if(str[i] == '.')
     522:	fd 01       	movw	r30, r26
     524:	e2 0f       	add	r30, r18
     526:	f3 1f       	adc	r31, r19
     528:	80 81       	ld	r24, Z
     52a:	8e 32       	cpi	r24, 0x2E	; 46
     52c:	29 f4       	brne	.+10     	; 0x538 <appendPercentAndTrim+0x2c>
		 {
			str[i+5] = '\0';		// cut the number after four digits behing the dot
     52e:	fd 01       	movw	r30, r26
     530:	e2 0f       	add	r30, r18
     532:	f3 1f       	adc	r31, r19
     534:	15 82       	std	Z+5, r1	; 0x05
			break;
     536:	06 c0       	rjmp	.+12     	; 0x544 <appendPercentAndTrim+0x38>
 }

 char *appendPercentAndTrim(char *str)
 {
	 uint8_t i;
	 for (i=0; i<strlen(str); i++)
     538:	9f 5f       	subi	r25, 0xFF	; 255
     53a:	29 2f       	mov	r18, r25
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	24 17       	cp	r18, r20
     540:	35 07       	cpc	r19, r21
     542:	78 f3       	brcs	.-34     	; 0x522 <appendPercentAndTrim+0x16>
		 {
			str[i+5] = '\0';		// cut the number after four digits behing the dot
			break;
		 }
	 }
	 for (i=0; i<strlen(str); i++)
     544:	fd 01       	movw	r30, r26
     546:	01 90       	ld	r0, Z+
     548:	00 20       	and	r0, r0
     54a:	e9 f7       	brne	.-6      	; 0x546 <appendPercentAndTrim+0x3a>
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	af 01       	movw	r20, r30
     550:	4a 1b       	sub	r20, r26
     552:	5b 0b       	sbc	r21, r27
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	07 c0       	rjmp	.+14     	; 0x566 <appendPercentAndTrim+0x5a>
	 {
		 if(str[i] == '\0')
     558:	fd 01       	movw	r30, r26
     55a:	e2 0f       	add	r30, r18
     55c:	f3 1f       	adc	r31, r19
     55e:	80 81       	ld	r24, Z
     560:	88 23       	and	r24, r24
     562:	31 f0       	breq	.+12     	; 0x570 <appendPercentAndTrim+0x64>
		 {
			str[i+5] = '\0';		// cut the number after four digits behing the dot
			break;
		 }
	 }
	 for (i=0; i<strlen(str); i++)
     564:	9f 5f       	subi	r25, 0xFF	; 255
     566:	29 2f       	mov	r18, r25
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	24 17       	cp	r18, r20
     56c:	35 07       	cpc	r19, r21
     56e:	a0 f3       	brcs	.-24     	; 0x558 <appendPercentAndTrim+0x4c>
		 if(str[i] == '\0')
		 {
			 break;
		 }
	 }
	 str[i]='%';
     570:	fd 01       	movw	r30, r26
     572:	e2 0f       	add	r30, r18
     574:	f3 1f       	adc	r31, r19
     576:	85 e2       	ldi	r24, 0x25	; 37
     578:	80 83       	st	Z, r24
	 str[i+1]='\0';
     57a:	11 82       	std	Z+1, r1	; 0x01
	 return str;
 }
     57c:	cd 01       	movw	r24, r26
     57e:	08 95       	ret

00000580 <appendHz>:

 char *appendHz(char *str)
 {
     580:	dc 01       	movw	r26, r24
	 uint8_t i;
	 for (i=0;i<strlen(str);i++)
     582:	fc 01       	movw	r30, r24
     584:	01 90       	ld	r0, Z+
     586:	00 20       	and	r0, r0
     588:	e9 f7       	brne	.-6      	; 0x584 <appendHz+0x4>
     58a:	31 97       	sbiw	r30, 0x01	; 1
     58c:	bf 01       	movw	r22, r30
     58e:	68 1b       	sub	r22, r24
     590:	79 0b       	sbc	r23, r25
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	07 c0       	rjmp	.+14     	; 0x5a4 <appendHz+0x24>
	 {
		 if(str[i] == '\0')
     596:	fd 01       	movw	r30, r26
     598:	e2 0f       	add	r30, r18
     59a:	f3 1f       	adc	r31, r19
     59c:	40 81       	ld	r20, Z
     59e:	44 23       	and	r20, r20
     5a0:	31 f0       	breq	.+12     	; 0x5ae <appendHz+0x2e>
 }

 char *appendHz(char *str)
 {
	 uint8_t i;
	 for (i=0;i<strlen(str);i++)
     5a2:	9f 5f       	subi	r25, 0xFF	; 255
     5a4:	29 2f       	mov	r18, r25
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	26 17       	cp	r18, r22
     5aa:	37 07       	cpc	r19, r23
     5ac:	a0 f3       	brcs	.-24     	; 0x596 <appendHz+0x16>
		 if(str[i] == '\0')
		 {
			 break;
		 }
	 }
	 str[i]=' ';
     5ae:	fd 01       	movw	r30, r26
     5b0:	e2 0f       	add	r30, r18
     5b2:	f3 1f       	adc	r31, r19
     5b4:	80 e2       	ldi	r24, 0x20	; 32
     5b6:	80 83       	st	Z, r24
	 str[i+1]='H';
     5b8:	88 e4       	ldi	r24, 0x48	; 72
     5ba:	81 83       	std	Z+1, r24	; 0x01
	 str[i+2]='z';
     5bc:	8a e7       	ldi	r24, 0x7A	; 122
     5be:	82 83       	std	Z+2, r24	; 0x02
	 str[i+3]='\0';
     5c0:	13 82       	std	Z+3, r1	; 0x03
	 return str;
 }
     5c2:	cd 01       	movw	r24, r26
     5c4:	08 95       	ret

000005c6 <getIndexOfFirstDigit>:

 uint8_t getIndexOfFirstDigit(char *str)
 {
     5c6:	dc 01       	movw	r26, r24
	 for (uint8_t i = 0; ;i++)
	 {
		 if(str[i] == '.')
     5c8:	8c 91       	ld	r24, X
     5ca:	8e 32       	cpi	r24, 0x2E	; 46
     5cc:	21 f0       	breq	.+8      	; 0x5d6 <getIndexOfFirstDigit+0x10>
			return i-1;
		 if(str[i] != '0')
     5ce:	80 33       	cpi	r24, 0x30	; 48
     5d0:	81 f4       	brne	.+32     	; 0x5f2 <getIndexOfFirstDigit+0x2c>
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <getIndexOfFirstDigit+0x1c>
	 return str;
 }

 uint8_t getIndexOfFirstDigit(char *str)
 {
	 for (uint8_t i = 0; ;i++)
     5d6:	90 e0       	ldi	r25, 0x00	; 0
	 {
		 if(str[i] == '.')
			return i-1;
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	89 0f       	add	r24, r25
     5dc:	08 95       	ret
		 if(str[i] != '0')
     5de:	20 33       	cpi	r18, 0x30	; 48
     5e0:	51 f4       	brne	.+20     	; 0x5f6 <getIndexOfFirstDigit+0x30>
	 return str;
 }

 uint8_t getIndexOfFirstDigit(char *str)
 {
	 for (uint8_t i = 0; ;i++)
     5e2:	9f 5f       	subi	r25, 0xFF	; 255
	 {
		 if(str[i] == '.')
     5e4:	fd 01       	movw	r30, r26
     5e6:	e9 0f       	add	r30, r25
     5e8:	f1 1d       	adc	r31, r1
     5ea:	20 81       	ld	r18, Z
     5ec:	2e 32       	cpi	r18, 0x2E	; 46
     5ee:	b9 f7       	brne	.-18     	; 0x5de <getIndexOfFirstDigit+0x18>
     5f0:	f3 cf       	rjmp	.-26     	; 0x5d8 <getIndexOfFirstDigit+0x12>
	 return str;
 }

 uint8_t getIndexOfFirstDigit(char *str)
 {
	 for (uint8_t i = 0; ;i++)
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	08 95       	ret
     5f6:	89 2f       	mov	r24, r25
		 {
			 return i;
		 }
	 }
	 return -1;
 }
     5f8:	08 95       	ret

000005fa <lastElem>:
	}
	return -1;
 }

uint8_t lastElem(const char *str)	// returns index of last char (without '\0')
{
     5fa:	dc 01       	movw	r26, r24
	uint8_t curs = 0;
	while (1)
	{
		if(str[curs] != '\0')
     5fc:	8c 91       	ld	r24, X
     5fe:	88 23       	and	r24, r24
     600:	49 f0       	breq	.+18     	; 0x614 <lastElem+0x1a>
     602:	80 e0       	ldi	r24, 0x00	; 0
			curs++;
     604:	8f 5f       	subi	r24, 0xFF	; 255
uint8_t lastElem(const char *str)	// returns index of last char (without '\0')
{
	uint8_t curs = 0;
	while (1)
	{
		if(str[curs] != '\0')
     606:	fd 01       	movw	r30, r26
     608:	e8 0f       	add	r30, r24
     60a:	f1 1d       	adc	r31, r1
     60c:	20 81       	ld	r18, Z
     60e:	21 11       	cpse	r18, r1
     610:	f9 cf       	rjmp	.-14     	; 0x604 <lastElem+0xa>
     612:	01 c0       	rjmp	.+2      	; 0x616 <lastElem+0x1c>
	return -1;
 }

uint8_t lastElem(const char *str)	// returns index of last char (without '\0')
{
	uint8_t curs = 0;
     614:	80 e0       	ldi	r24, 0x00	; 0
		if(str[curs] != '\0')
			curs++;
		else return curs-1;
	}

}
     616:	81 50       	subi	r24, 0x01	; 1
     618:	08 95       	ret

0000061a <getIndexOfLastDigit>:
	 }
	 return -1;
 }

 uint8_t getIndexOfLastDigit(char *str)
 {
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	ec 01       	movw	r28, r24
	 for (uint8_t i = lastElem(str); i!=0xFF; i--)
     620:	0e 94 fd 02 	call	0x5fa	; 0x5fa <lastElem>
     624:	8f 3f       	cpi	r24, 0xFF	; 255
     626:	a1 f0       	breq	.+40     	; 0x650 <getIndexOfLastDigit+0x36>
	 {
		if(str[i] != '0')
     628:	fe 01       	movw	r30, r28
     62a:	e8 0f       	add	r30, r24
     62c:	f1 1d       	adc	r31, r1
     62e:	90 81       	ld	r25, Z
     630:	90 33       	cpi	r25, 0x30	; 48
     632:	59 f0       	breq	.+22     	; 0x64a <getIndexOfLastDigit+0x30>
     634:	06 c0       	rjmp	.+12     	; 0x642 <getIndexOfLastDigit+0x28>
     636:	fe 01       	movw	r30, r28
     638:	e8 0f       	add	r30, r24
     63a:	f1 1d       	adc	r31, r1
     63c:	90 81       	ld	r25, Z
     63e:	90 33       	cpi	r25, 0x30	; 48
     640:	21 f0       	breq	.+8      	; 0x64a <getIndexOfLastDigit+0x30>
		{
			if(str[i] == '.')
     642:	9e 32       	cpi	r25, 0x2E	; 46
     644:	31 f4       	brne	.+12     	; 0x652 <getIndexOfLastDigit+0x38>
				return i-1;
     646:	81 50       	subi	r24, 0x01	; 1
     648:	04 c0       	rjmp	.+8      	; 0x652 <getIndexOfLastDigit+0x38>
	 return -1;
 }

 uint8_t getIndexOfLastDigit(char *str)
 {
	 for (uint8_t i = lastElem(str); i!=0xFF; i--)
     64a:	81 50       	subi	r24, 0x01	; 1
     64c:	a0 f7       	brcc	.-24     	; 0x636 <getIndexOfLastDigit+0x1c>
     64e:	01 c0       	rjmp	.+2      	; 0x652 <getIndexOfLastDigit+0x38>
			if(str[i] == '.')
				return i-1;
			return i;
		}
	}
	return -1;
     650:	8f ef       	ldi	r24, 0xFF	; 255
 }
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <trimZeroes>:
	}
	return dest;
 }

 char *trimZeroes(char *str)
 {
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	ec 01       	movw	r28, r24
	 uint8_t startIndex = getIndexOfFirstDigit(str);
     65e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <getIndexOfFirstDigit>
	 uint8_t i = 0;
	 while(str[i+startIndex] != '\0')
     662:	48 2f       	mov	r20, r24
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	fe 01       	movw	r30, r28
     668:	e4 0f       	add	r30, r20
     66a:	f5 1f       	adc	r31, r21
     66c:	20 81       	ld	r18, Z
     66e:	22 23       	and	r18, r18
     670:	71 f0       	breq	.+28     	; 0x68e <trimZeroes+0x36>
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	af 01       	movw	r20, r30
	 {
		 str[i] = str[i+startIndex];
     676:	fe 01       	movw	r30, r28
     678:	e9 0f       	add	r30, r25
     67a:	f1 1d       	adc	r31, r1
     67c:	20 83       	st	Z, r18
		 i++;
     67e:	9f 5f       	subi	r25, 0xFF	; 255

 char *trimZeroes(char *str)
 {
	 uint8_t startIndex = getIndexOfFirstDigit(str);
	 uint8_t i = 0;
	 while(str[i+startIndex] != '\0')
     680:	fa 01       	movw	r30, r20
     682:	e9 0f       	add	r30, r25
     684:	f1 1d       	adc	r31, r1
     686:	20 81       	ld	r18, Z
     688:	21 11       	cpse	r18, r1
     68a:	f5 cf       	rjmp	.-22     	; 0x676 <trimZeroes+0x1e>
     68c:	01 c0       	rjmp	.+2      	; 0x690 <trimZeroes+0x38>
 }

 char *trimZeroes(char *str)
 {
	 uint8_t startIndex = getIndexOfFirstDigit(str);
	 uint8_t i = 0;
     68e:	90 e0       	ldi	r25, 0x00	; 0
	 while(str[i+startIndex] != '\0')
	 {
		 str[i] = str[i+startIndex];
		 i++;
	 }
	 str[i] = str[i+startIndex];				// finish string with '\0'
     690:	fe 01       	movw	r30, r28
     692:	e9 0f       	add	r30, r25
     694:	f1 1d       	adc	r31, r1
     696:	10 82       	st	Z, r1
	 str[getIndexOfLastDigit(str) + 1] = '\0';	// trim ending zeroes
     698:	ce 01       	movw	r24, r28
     69a:	0e 94 0d 03 	call	0x61a	; 0x61a <getIndexOfLastDigit>
     69e:	fe 01       	movw	r30, r28
     6a0:	e8 0f       	add	r30, r24
     6a2:	f1 1d       	adc	r31, r1
     6a4:	11 82       	std	Z+1, r1	; 0x01
	 return str;
 }
     6a6:	ce 01       	movw	r24, r28
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <printInfo16bitPWM>:
		#endif
    }
 }

void printInfo16bitPWM()
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
	#ifndef DEBUG_MODE
	lcd_clrscr();
     6b2:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_clrscr>
	lcd_puts("Duty:");
     6b6:	87 e0       	ldi	r24, 0x07	; 7
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
	sprintf(temp, "%u/%u", OCR1B, OCR1A);
     6be:	c8 e8       	ldi	r28, 0x88	; 136
     6c0:	d0 e0       	ldi	r29, 0x00	; 0
     6c2:	28 81       	ld	r18, Y
     6c4:	39 81       	ldd	r19, Y+1	; 0x01
     6c6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     6ca:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     6ce:	3f 93       	push	r19
     6d0:	2f 93       	push	r18
     6d2:	9f 93       	push	r25
     6d4:	8f 93       	push	r24
     6d6:	8d e0       	ldi	r24, 0x0D	; 13
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	82 e6       	ldi	r24, 0x62	; 98
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <sprintf>
	lcd_puts(temp);
     6ea:	82 e6       	ldi	r24, 0x62	; 98
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
	lcd_putc('\n');
     6f2:	8a e0       	ldi	r24, 0x0A	; 10
     6f4:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_putc>
	lcd_puts("In %: ");
     6f8:	83 e1       	ldi	r24, 0x13	; 19
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
	if(OCR1A != 0)
     700:	88 81       	ld	r24, Y
     702:	99 81       	ldd	r25, Y+1	; 0x01
     704:	2d b7       	in	r18, 0x3d	; 61
     706:	3e b7       	in	r19, 0x3e	; 62
     708:	28 5f       	subi	r18, 0xF8	; 248
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	3e bf       	out	0x3e, r19	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	2d bf       	out	0x3d, r18	; 61
     716:	89 2b       	or	r24, r25
     718:	29 f1       	breq	.+74     	; 0x764 <printInfo16bitPWM+0xb6>
		sprintf(temp, "%f", 100.0 * PWM_16bitDuty);
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	48 ec       	ldi	r20, 0xC8	; 200
     720:	52 e4       	ldi	r21, 0x42	; 66
     722:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <PWM_16bitDuty>
     726:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <PWM_16bitDuty+0x1>
     72a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <PWM_16bitDuty+0x2>
     72e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <PWM_16bitDuty+0x3>
     732:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	7f 93       	push	r23
     73c:	6f 93       	push	r22
     73e:	8a e1       	ldi	r24, 0x1A	; 26
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	82 e6       	ldi	r24, 0x62	; 98
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <sprintf>
     752:	8d b7       	in	r24, 0x3d	; 61
     754:	9e b7       	in	r25, 0x3e	; 62
     756:	08 96       	adiw	r24, 0x08	; 8
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	9e bf       	out	0x3e, r25	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	8d bf       	out	0x3d, r24	; 61
     762:	19 c0       	rjmp	.+50     	; 0x796 <printInfo16bitPWM+0xe8>
	else
		sprintf(temp, "%f", 100.0);
     764:	82 e4       	ldi	r24, 0x42	; 66
     766:	8f 93       	push	r24
     768:	88 ec       	ldi	r24, 0xC8	; 200
     76a:	8f 93       	push	r24
     76c:	1f 92       	push	r1
     76e:	1f 92       	push	r1
     770:	8a e1       	ldi	r24, 0x1A	; 26
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	82 e6       	ldi	r24, 0x62	; 98
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <sprintf>
     784:	2d b7       	in	r18, 0x3d	; 61
     786:	3e b7       	in	r19, 0x3e	; 62
     788:	28 5f       	subi	r18, 0xF8	; 248
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	3e bf       	out	0x3e, r19	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	2d bf       	out	0x3d, r18	; 61
	lcd_puts(appendPercentAndTrim(trimZeroes(temp)));	// print duty (%)	100.0 * OCR1B / OCR1A
     796:	82 e6       	ldi	r24, 0x62	; 98
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 2c 03 	call	0x658	; 0x658 <trimZeroes>
     79e:	0e 94 86 02 	call	0x50c	; 0x50c <appendPercentAndTrim>
     7a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
	lcd_gotoxy(15,2);
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	8f e0       	ldi	r24, 0x0F	; 15
     7aa:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
	if (hold)
     7ae:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hold>
     7b2:	88 23       	and	r24, r24
     7b4:	19 f0       	breq	.+6      	; 0x7bc <printInfo16bitPWM+0x10e>
	{
		lcd_putc('H');
     7b6:	88 e4       	ldi	r24, 0x48	; 72
     7b8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_putc>
	printf("Timer: %u\n", TCNT1);
	printf("Duty: %u / %u\n", OCR1B, OCR1A);
	printf("High: %u\n", high_val);
	printf("Low: %u\n", low_val);
	#endif
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <setupFreqGen>:

}

 void setupFreqGen()
 {
	TCCR1A = (1<<COM1A0)|(1<<COM1B1)|(1<<WGM10)|(1<<WGM11);		// Togggle OC1A on match
     7c2:	83 e6       	ldi	r24, 0x63	; 99
     7c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = CR1B(presc);										// Clear Timer on match	(start with prescaler of 1024)
     7c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <presc>
     7cc:	88 61       	ori	r24, 0x18	; 24
     7ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	DDRB |= (1<<DDB1)|(1<<DDB2);								// Frequency-pin & 16bit-PWM-pin output
     7d2:	84 b1       	in	r24, 0x04	; 4
     7d4:	86 60       	ori	r24, 0x06	; 6
     7d6:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0xFFFF;
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7e0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     7e4:	08 95       	ret

000007e6 <setupAdc>:
 }

 void setupAdc()
 {
	ADMUX = (1<<ADLAR)|(0<<REFS0);							// Analog input at PC0&PC1 and left adjust so that the 8bit value is completely in ADCH
     7e6:	80 e2       	ldi	r24, 0x20	; 32
     7e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) |(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);	// ADPS = 7 =^= prescaler = 128 (not sure if necessary)
     7ec:	87 e8       	ldi	r24, 0x87	; 135
     7ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DIDR0 |= (1<<ADC0D)|(1<<ADC1D);							// Disable digital input buffer on PC0&PC1 (only used for Analog input) to reduce power consumption
     7f2:	ee e7       	ldi	r30, 0x7E	; 126
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	83 60       	ori	r24, 0x03	; 3
     7fa:	80 83       	st	Z, r24
     7fc:	08 95       	ret

000007fe <setupButtons>:
 }

 void setupButtons()
 {
	DDRD &= ~((1<<DDD2)|(1<<DDD3));
     7fe:	8a b1       	in	r24, 0x0a	; 10
     800:	83 7f       	andi	r24, 0xF3	; 243
     802:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2)|(1<<PORTD3);				// Pullup enable
     804:	8b b1       	in	r24, 0x0b	; 11
     806:	8c 60       	ori	r24, 0x0C	; 12
     808:	8b b9       	out	0x0b, r24	; 11
     80a:	08 95       	ret

0000080c <readAdcLow>:
 }

 uint8_t readAdcLow()
 {
	ADMUX = MUX_LOW;
     80c:	81 e2       	ldi	r24, 0x21	; 33
     80e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);		// read adc twice because first value after mux change is innaccurate
     812:	ea e7       	ldi	r30, 0x7A	; 122
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	80 64       	ori	r24, 0x40	; 64
     81a:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     81c:	80 81       	ld	r24, Z
     81e:	86 fd       	sbrc	r24, 6
     820:	fd cf       	rjmp	.-6      	; 0x81c <readAdcLow+0x10>
	ADCSRA |= (1<<ADSC);
     822:	ea e7       	ldi	r30, 0x7A	; 122
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	80 64       	ori	r24, 0x40	; 64
     82a:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     82c:	80 81       	ld	r24, Z
     82e:	86 fd       	sbrc	r24, 6
     830:	fd cf       	rjmp	.-6      	; 0x82c <readAdcLow+0x20>
	return 0xFF-ADCH;				// Lower potentiometer is wired up in reverse
     832:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 }
     836:	80 95       	com	r24
     838:	08 95       	ret

0000083a <readAdcHigh>:

 uint8_t readAdcHigh()
 {
	ADMUX = MUX_HIGH;
     83a:	80 e2       	ldi	r24, 0x20	; 32
     83c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);		// read adc twice because first value after mux change is innaccurate
     840:	ea e7       	ldi	r30, 0x7A	; 122
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	80 64       	ori	r24, 0x40	; 64
     848:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     84a:	80 81       	ld	r24, Z
     84c:	86 fd       	sbrc	r24, 6
     84e:	fd cf       	rjmp	.-6      	; 0x84a <readAdcHigh+0x10>
	ADCSRA |= (1<<ADSC);
     850:	ea e7       	ldi	r30, 0x7A	; 122
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	80 64       	ori	r24, 0x40	; 64
     858:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     85a:	80 81       	ld	r24, Z
     85c:	86 fd       	sbrc	r24, 6
     85e:	fd cf       	rjmp	.-6      	; 0x85a <readAdcHigh+0x20>
	return ADCH;
     860:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 }
     864:	08 95       	ret

00000866 <readPotentiometers>:
	}
 }

void readPotentiometers()
{
	low_val = readAdcLow();
     866:	0e 94 06 04 	call	0x80c	; 0x80c <readAdcLow>
     86a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <low_val>
	high_val = readAdcHigh();
     86e:	0e 94 1d 04 	call	0x83a	; 0x83a <readAdcHigh>
     872:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
	if(low_val != prev_low_val || high_val != prev_high_val)
     876:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <low_val>
     87a:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <prev_low_val>
     87e:	92 13       	cpse	r25, r18
     880:	04 c0       	rjmp	.+8      	; 0x88a <readPotentiometers+0x24>
     882:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <prev_high_val>
     886:	82 17       	cp	r24, r18
     888:	39 f0       	breq	.+14     	; 0x898 <readPotentiometers+0x32>
	{
		prev_high_val = high_val;
     88a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <prev_high_val>
		prev_low_val = low_val;
     88e:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <prev_low_val>
		valuesChanged = 1;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     898:	08 95       	ret

0000089a <getPrescF>:
	return ADCH;
 }

float getPrescF()
{
	switch (presc)
     89a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <presc>
     89e:	83 30       	cpi	r24, 0x03	; 3
     8a0:	81 f0       	breq	.+32     	; 0x8c2 <getPrescF+0x28>
     8a2:	28 f4       	brcc	.+10     	; 0x8ae <getPrescF+0x14>
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	01 f1       	breq	.+64     	; 0x8e8 <getPrescF+0x4e>
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <getPrescF+0x1e>
     8ac:	19 c0       	rjmp	.+50     	; 0x8e0 <getPrescF+0x46>
     8ae:	84 30       	cpi	r24, 0x04	; 4
     8b0:	69 f0       	breq	.+26     	; 0x8cc <getPrescF+0x32>
     8b2:	85 30       	cpi	r24, 0x05	; 5
     8b4:	81 f0       	breq	.+32     	; 0x8d6 <getPrescF+0x3c>
     8b6:	14 c0       	rjmp	.+40     	; 0x8e0 <getPrescF+0x46>
	{
	case PRESC_VAL_1:
		return PRESC_1;
	case PRESC_VAL_8:
		return PRESC_2;
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	91 e4       	ldi	r25, 0x41	; 65
     8c0:	08 95       	ret
	case PRESC_VAL_64:
		return PRESC_3;
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	80 e8       	ldi	r24, 0x80	; 128
     8c8:	92 e4       	ldi	r25, 0x42	; 66
     8ca:	08 95       	ret
	case PRESC_VAL_256:
		return PRESC_4;
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e8       	ldi	r24, 0x80	; 128
     8d2:	93 e4       	ldi	r25, 0x43	; 67
     8d4:	08 95       	ret
	case PRESC_VAL_1024:
		return PRESC_5;
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 e8       	ldi	r24, 0x80	; 128
     8dc:	94 e4       	ldi	r25, 0x44	; 68
     8de:	08 95       	ret
	}
	return 0;	//unreachable
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	cb 01       	movw	r24, r22
     8e6:	08 95       	ret
float getPrescF()
{
	switch (presc)
	{
	case PRESC_VAL_1:
		return PRESC_1;
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	80 e8       	ldi	r24, 0x80	; 128
     8ee:	9f e3       	ldi	r25, 0x3F	; 63
		return PRESC_4;
	case PRESC_VAL_1024:
		return PRESC_5;
	}
	return 0;	//unreachable
}
     8f0:	08 95       	ret

000008f2 <printInfoFreqGen>:
	printf("Low: %u\n", low_val);
	#endif
}

void printInfoFreqGen()
{
     8f2:	8f 92       	push	r8
     8f4:	9f 92       	push	r9
     8f6:	af 92       	push	r10
     8f8:	bf 92       	push	r11
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
	#ifndef DEBUG_MODE
	sprintf(freq, "%f", 16000000.0/(2.0*getPrescF()*((float)OCR1A+1.0)));
     902:	0e 94 4d 04 	call	0x89a	; 0x89a <getPrescF>
     906:	6b 01       	movw	r12, r22
     908:	7c 01       	movw	r14, r24
     90a:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     90e:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 19 07 	call	0xe32	; 0xe32 <__floatunsisf>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e8       	ldi	r20, 0x80	; 128
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3>
     926:	4b 01       	movw	r8, r22
     928:	5c 01       	movw	r10, r24
     92a:	a7 01       	movw	r20, r14
     92c:	96 01       	movw	r18, r12
     92e:	c7 01       	movw	r24, r14
     930:	b6 01       	movw	r22, r12
     932:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c5 01       	movw	r24, r10
     93c:	b4 01       	movw	r22, r8
     93e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	74 e2       	ldi	r23, 0x24	; 36
     94a:	84 e7       	ldi	r24, 0x74	; 116
     94c:	9b e4       	ldi	r25, 0x4B	; 75
     94e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__divsf3>
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	7f 93       	push	r23
     958:	6f 93       	push	r22
     95a:	8a e1       	ldi	r24, 0x1A	; 26
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	9f 93       	push	r25
     960:	8f 93       	push	r24
     962:	81 e5       	ldi	r24, 0x51	; 81
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	9f 93       	push	r25
     968:	8f 93       	push	r24
     96a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <sprintf>
	appendHz(trimZeroes(freq));
     96e:	81 e5       	ldi	r24, 0x51	; 81
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 2c 03 	call	0x658	; 0x658 <trimZeroes>
     976:	0e 94 c0 02 	call	0x580	; 0x580 <appendHz>

	lcd_clrscr();
     97a:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_clrscr>
	lcd_puts("Freq:    P: ");
     97e:	8d e1       	ldi	r24, 0x1D	; 29
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
	lcd_puts(getPrescS(prescs));
     986:	8c e4       	ldi	r24, 0x4C	; 76
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 4f 02 	call	0x49e	; 0x49e <getPrescS>
     98e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
	lcd_putc('\n');	// "Freq:    P: XXXX"
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_putc>
	lcd_putc(' ');
     998:	80 e2       	ldi	r24, 0x20	; 32
     99a:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_putc>
	lcd_puts(freq);
     99e:	81 e5       	ldi	r24, 0x51	; 81
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
	lcd_gotoxy(15,2);
     9a6:	62 e0       	ldi	r22, 0x02	; 2
     9a8:	8f e0       	ldi	r24, 0x0F	; 15
     9aa:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
	if (hold)
     9ae:	8d b7       	in	r24, 0x3d	; 61
     9b0:	9e b7       	in	r25, 0x3e	; 62
     9b2:	08 96       	adiw	r24, 0x08	; 8
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	9e bf       	out	0x3e, r25	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	8d bf       	out	0x3d, r24	; 61
     9be:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hold>
     9c2:	88 23       	and	r24, r24
     9c4:	19 f0       	breq	.+6      	; 0x9cc <__stack+0xcd>
	{
		lcd_putc('H');
     9c6:	88 e4       	ldi	r24, 0x48	; 72
     9c8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_putc>
	printf("Timer: %u\n", TCNT1);
	printf("OCR1A: %u\n", OCR1A);
	printf("High: %u\n", high_val);
	printf("Low: %u\n", low_val);
	#endif
}
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	9f 90       	pop	r9
     9da:	8f 90       	pop	r8
     9dc:	08 95       	ret

000009de <main>:
 int main(void)
 {
	#ifdef DEBUG_MODE
	setupUART();
	#else
	lcd_init(LCD_DISP_ON);
     9de:	8c e0       	ldi	r24, 0x0C	; 12
     9e0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_init>
	#endif

	setupAdc();
     9e4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <setupAdc>
	setupButtons();
     9e8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <setupButtons>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ec:	8f e3       	ldi	r24, 0x3F	; 63
     9ee:	9c e9       	ldi	r25, 0x9C	; 156
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <main+0x12>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <main+0x18>
     9f6:	00 00       	nop
	_delay_ms(10);
	readPotentiometers();
     9f8:	0e 94 33 04 	call	0x866	; 0x866 <readPotentiometers>
     9fc:	ef e3       	ldi	r30, 0x3F	; 63
     9fe:	fc e9       	ldi	r31, 0x9C	; 156
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <main+0x22>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <main+0x28>
     a06:	00 00       	nop
	_delay_ms(10);
    setupFreqGen();
     a08:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <setupFreqGen>
	STATE = STATE_FREQ_GEN;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <STATE>
			}
			// Freq = F_CPU/(2*presc_n*(OCR1A))
			if(valuesChanged && !hold)
			{
				PWM_16bitDuty = ((float)(((uint16_t)high_val)<<8|(uint16_t)low_val))/65535.0;
				uint16_t newDutyVal = (uint16_t)(PWM_16bitDuty * (float)OCR1A);
     a12:	0f 2e       	mov	r0, r31
     a14:	f8 e8       	ldi	r31, 0x88	; 136
     a16:	ef 2e       	mov	r14, r31
     a18:	f1 2c       	mov	r15, r1
     a1a:	f0 2d       	mov	r31, r0
				OCR1B = newDutyVal;
     a1c:	0f 2e       	mov	r0, r31
     a1e:	fa e8       	ldi	r31, 0x8A	; 138
     a20:	cf 2e       	mov	r12, r31
     a22:	d1 2c       	mov	r13, r1
     a24:	f0 2d       	mov	r31, r0
				{
					TCCR1A &= ~(1<<COM1B1);
				}
				else
				{
					TCCR1A |= (1<<COM1B1);
     a26:	00 e8       	ldi	r16, 0x80	; 128
     a28:	10 e0       	ldi	r17, 0x00	; 0
			printInfoFreqGen();
			break;
		case STATE_16BIT_PWM:
			if(stateChanged)
			{
				presc = TCCR1B & 0x07;	// read prescaler from TCCR1B
     a2a:	c1 e8       	ldi	r28, 0x81	; 129
     a2c:	d0 e0       	ldi	r29, 0x00	; 0
			}
			// Freq = F_CPU/(2*presc_n*(OCR1A))
			if(valuesChanged && !hold)
			{
				TCCR1B = CR1B(presc);
				OCR1AH = 0xFF-high_val;	//higher value means lower frequency
     a2e:	0f 2e       	mov	r0, r31
     a30:	f9 e8       	ldi	r31, 0x89	; 137
     a32:	6f 2e       	mov	r6, r31
     a34:	71 2c       	mov	r7, r1
     a36:	f0 2d       	mov	r31, r0
	_delay_ms(10);
    setupFreqGen();
	STATE = STATE_FREQ_GEN;
    while (1)
    {
		pollButtons();
     a38:	0e 94 b0 01 	call	0x360	; 0x360 <pollButtons>
		readPotentiometers();
     a3c:	0e 94 33 04 	call	0x866	; 0x866 <readPotentiometers>

		switch(STATE)
     a40:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <STATE>
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	09 f4       	brne	.+2      	; 0xa4a <main+0x6c>
     a48:	4f c0       	rjmp	.+158    	; 0xae8 <main+0x10a>
     a4a:	83 30       	cpi	r24, 0x03	; 3
     a4c:	09 f4       	brne	.+2      	; 0xa50 <main+0x72>
     a4e:	9e c0       	rjmp	.+316    	; 0xb8c <main+0x1ae>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	09 f0       	breq	.+2      	; 0xa56 <main+0x78>
     a54:	bb c0       	rjmp	.+374    	; 0xbcc <main+0x1ee>
		{
		case STATE_OFF:
			break;
		case STATE_FREQ_GEN:
			if(stateChanged)
     a56:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <stateChanged>
     a5a:	88 23       	and	r24, r24
     a5c:	21 f0       	breq	.+8      	; 0xa66 <main+0x88>
			{
				presc = TCCR1B & 0x07;	// read prescaler from TCCR1B
     a5e:	88 81       	ld	r24, Y
     a60:	87 70       	andi	r24, 0x07	; 7
     a62:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <presc>
			}
			// Freq = F_CPU/(2*presc_n*(OCR1A))
			if(valuesChanged && !hold)
     a66:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a6a:	88 23       	and	r24, r24
     a6c:	a9 f1       	breq	.+106    	; 0xad8 <main+0xfa>
     a6e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hold>
     a72:	81 11       	cpse	r24, r1
     a74:	34 c0       	rjmp	.+104    	; 0xade <main+0x100>
			{
				TCCR1B = CR1B(presc);
     a76:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <presc>
     a7a:	88 61       	ori	r24, 0x18	; 24
     a7c:	88 83       	st	Y, r24
				OCR1AH = 0xFF-high_val;	//higher value means lower frequency
     a7e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     a82:	80 95       	com	r24
     a84:	f3 01       	movw	r30, r6
     a86:	80 83       	st	Z, r24
				OCR1AL = 0xFF-low_val;	//
     a88:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <low_val>
     a8c:	80 95       	com	r24
     a8e:	f7 01       	movw	r30, r14
     a90:	80 83       	st	Z, r24
				uint16_t newDutyVal = (uint16_t)(PWM_16bitDuty * (float)OCR1A);
     a92:	60 81       	ld	r22, Z
     a94:	71 81       	ldd	r23, Z+1	; 0x01
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 19 07 	call	0xe32	; 0xe32 <__floatunsisf>
     a9e:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <PWM_16bitDuty>
     aa2:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <PWM_16bitDuty+0x1>
     aa6:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <PWM_16bitDuty+0x2>
     aaa:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <PWM_16bitDuty+0x3>
     aae:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     ab2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fixunssfsi>
				OCR1B = newDutyVal;
     ab6:	f6 01       	movw	r30, r12
     ab8:	71 83       	std	Z+1, r23	; 0x01
     aba:	60 83       	st	Z, r22
				if(newDutyVal == 0)
     abc:	67 2b       	or	r22, r23
     abe:	29 f4       	brne	.+10     	; 0xaca <main+0xec>
				{
					TCCR1A &= ~(1<<COM1B1);
     ac0:	f8 01       	movw	r30, r16
     ac2:	80 81       	ld	r24, Z
     ac4:	8f 7d       	andi	r24, 0xDF	; 223
     ac6:	80 83       	st	Z, r24
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <main+0xf4>
				}
				else
				{
					TCCR1A |= (1<<COM1B1);
     aca:	f8 01       	movw	r30, r16
     acc:	80 81       	ld	r24, Z
     ace:	80 62       	ori	r24, 0x20	; 32
     ad0:	80 83       	st	Z, r24
					}
				valuesChanged = 0;
     ad2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			{
				presc = TCCR1B & 0x07;	// read prescaler from TCCR1B
			}
			// Freq = F_CPU/(2*presc_n*(OCR1A))
			if(valuesChanged && !hold)
			{
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <main+0x104>
				{
					TCCR1A |= (1<<COM1B1);
					}
				valuesChanged = 0;
			}
			else if(hold && valuesChanged)
     ad8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hold>
     adc:	81 11       	cpse	r24, r1
     ade:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			if (OCR1A < TCNT1)
			{
				TCNT1 = 0xFFFE;
			}
			*/
			printInfoFreqGen();
     ae2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <printInfoFreqGen>
			break;
     ae6:	72 c0       	rjmp	.+228    	; 0xbcc <main+0x1ee>
		case STATE_16BIT_PWM:
			if(stateChanged)
     ae8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <stateChanged>
     aec:	88 23       	and	r24, r24
     aee:	21 f0       	breq	.+8      	; 0xaf8 <main+0x11a>
			{
				presc = TCCR1B & 0x07;	// read prescaler from TCCR1B
     af0:	88 81       	ld	r24, Y
     af2:	87 70       	andi	r24, 0x07	; 7
     af4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <presc>
			}
			// Freq = F_CPU/(2*presc_n*(OCR1A))
			if(valuesChanged && !hold)
     af8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     afc:	88 23       	and	r24, r24
     afe:	f1 f1       	breq	.+124    	; 0xb7c <main+0x19e>
     b00:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hold>
     b04:	81 11       	cpse	r24, r1
     b06:	3d c0       	rjmp	.+122    	; 0xb82 <main+0x1a4>
			{
				PWM_16bitDuty = ((float)(((uint16_t)high_val)<<8|(uint16_t)low_val))/65535.0;
     b08:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <__data_end>
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	76 2f       	mov	r23, r22
     b10:	66 27       	eor	r22, r22
     b12:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <low_val>
     b16:	68 2b       	or	r22, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 19 07 	call	0xe32	; 0xe32 <__floatunsisf>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	3f ef       	ldi	r19, 0xFF	; 255
     b24:	4f e7       	ldi	r20, 0x7F	; 127
     b26:	57 e4       	ldi	r21, 0x47	; 71
     b28:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__divsf3>
     b2c:	4b 01       	movw	r8, r22
     b2e:	5c 01       	movw	r10, r24
     b30:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <PWM_16bitDuty>
     b34:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <PWM_16bitDuty+0x1>
     b38:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <PWM_16bitDuty+0x2>
     b3c:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <PWM_16bitDuty+0x3>
				uint16_t newDutyVal = (uint16_t)(PWM_16bitDuty * (float)OCR1A);
     b40:	f7 01       	movw	r30, r14
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 19 07 	call	0xe32	; 0xe32 <__floatunsisf>
     b4e:	a5 01       	movw	r20, r10
     b50:	94 01       	movw	r18, r8
     b52:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     b56:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fixunssfsi>
				OCR1B = newDutyVal;
     b5a:	f6 01       	movw	r30, r12
     b5c:	71 83       	std	Z+1, r23	; 0x01
     b5e:	60 83       	st	Z, r22
				if(newDutyVal == 0)
     b60:	67 2b       	or	r22, r23
     b62:	29 f4       	brne	.+10     	; 0xb6e <main+0x190>
				{
					TCCR1A &= ~(1<<COM1B1);
     b64:	f8 01       	movw	r30, r16
     b66:	80 81       	ld	r24, Z
     b68:	8f 7d       	andi	r24, 0xDF	; 223
     b6a:	80 83       	st	Z, r24
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <main+0x198>
				}
				else
				{
					TCCR1A |= (1<<COM1B1);
     b6e:	f8 01       	movw	r30, r16
     b70:	80 81       	ld	r24, Z
     b72:	80 62       	ori	r24, 0x20	; 32
     b74:	80 83       	st	Z, r24
				}
				valuesChanged = 0;
     b76:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			{
				presc = TCCR1B & 0x07;	// read prescaler from TCCR1B
			}
			// Freq = F_CPU/(2*presc_n*(OCR1A))
			if(valuesChanged && !hold)
			{
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <main+0x1a8>
				{
					TCCR1A |= (1<<COM1B1);
				}
				valuesChanged = 0;
			}
			else if(hold && valuesChanged)
     b7c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hold>
     b80:	81 11       	cpse	r24, r1
     b82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			{
				//Maybe change something?
			}
			printInfo16bitPWM();
     b86:	0e 94 57 03 	call	0x6ae	; 0x6ae <printInfo16bitPWM>
			break;
     b8a:	20 c0       	rjmp	.+64     	; 0xbcc <main+0x1ee>
		case STATE_DEBUG:		// Maybe exclude from normal useage?
			#ifndef DEBUG_MODE
			lcd_clrscr();
     b8c:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_clrscr>
			lcd_puts("Low: ");
     b90:	8a e2       	ldi	r24, 0x2A	; 42
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
			lcd_puts((const char*)itoa(low_val, temp, 10));
     b98:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <low_val>
     b9c:	4a e0       	ldi	r20, 0x0A	; 10
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	62 e6       	ldi	r22, 0x62	; 98
     ba2:	71 e0       	ldi	r23, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 b6 0c 	call	0x196c	; 0x196c <itoa>
     baa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
			lcd_puts("\nHigh: ");
     bae:	80 e3       	ldi	r24, 0x30	; 48
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
			lcd_puts(itoa(high_val, temp, 10));
     bb6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     bba:	4a e0       	ldi	r20, 0x0A	; 10
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	62 e6       	ldi	r22, 0x62	; 98
     bc0:	71 e0       	ldi	r23, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 b6 0c 	call	0x196c	; 0x196c <itoa>
     bc8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
			#endif
			break;
		}

		#ifndef DEBUG_MODE
		if(btn0DownCycles >= HOLD_DOWN_CYCLES)
     bcc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <btn0DownCycles>
     bd0:	84 36       	cpi	r24, 0x64	; 100
     bd2:	48 f0       	brcs	.+18     	; 0xbe6 <main+0x208>
		{
			lcd_gotoxy(14,2);
     bd4:	62 e0       	ldi	r22, 0x02	; 2
     bd6:	8e e0       	ldi	r24, 0x0E	; 14
     bd8:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
			lcd_puts("<-");
     bdc:	88 e3       	ldi	r24, 0x38	; 56
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
     be4:	0c c0       	rjmp	.+24     	; 0xbfe <main+0x220>
		}
		else if(btn1DownCycles >= HOLD_DOWN_CYCLES)
     be6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <btn1DownCycles>
     bea:	84 36       	cpi	r24, 0x64	; 100
     bec:	40 f0       	brcs	.+16     	; 0xbfe <main+0x220>
		{
			lcd_gotoxy(14,2);
     bee:	62 e0       	ldi	r22, 0x02	; 2
     bf0:	8e e0       	ldi	r24, 0x0E	; 14
     bf2:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
			lcd_puts("->");
     bf6:	8b e3       	ldi	r24, 0x3B	; 59
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_puts>
		else if(btn1DownCycles >= HOLD_DOWN_CYCLES)
		{
			printf("->\n");
		}
		#endif
		if(stateChanged)
     bfe:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <stateChanged>
     c02:	81 11       	cpse	r24, r1
			stateChanged = 0;
     c04:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <stateChanged>
     c08:	8f e3       	ldi	r24, 0x3F	; 63
     c0a:	9c e9       	ldi	r25, 0x9C	; 156
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <main+0x22e>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <main+0x234>
     c12:	00 00       	nop
     c14:	11 cf       	rjmp	.-478    	; 0xa38 <main+0x5a>

00000c16 <__subsf3>:
     c16:	50 58       	subi	r21, 0x80	; 128

00000c18 <__addsf3>:
     c18:	bb 27       	eor	r27, r27
     c1a:	aa 27       	eor	r26, r26
     c1c:	0e 94 23 06 	call	0xc46	; 0xc46 <__addsf3x>
     c20:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_round>
     c24:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_pscA>
     c28:	38 f0       	brcs	.+14     	; 0xc38 <__addsf3+0x20>
     c2a:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_pscB>
     c2e:	20 f0       	brcs	.+8      	; 0xc38 <__addsf3+0x20>
     c30:	39 f4       	brne	.+14     	; 0xc40 <__addsf3+0x28>
     c32:	9f 3f       	cpi	r25, 0xFF	; 255
     c34:	19 f4       	brne	.+6      	; 0xc3c <__addsf3+0x24>
     c36:	26 f4       	brtc	.+8      	; 0xc40 <__addsf3+0x28>
     c38:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_nan>
     c3c:	0e f4       	brtc	.+2      	; 0xc40 <__addsf3+0x28>
     c3e:	e0 95       	com	r30
     c40:	e7 fb       	bst	r30, 7
     c42:	0c 94 56 07 	jmp	0xeac	; 0xeac <__fp_inf>

00000c46 <__addsf3x>:
     c46:	e9 2f       	mov	r30, r25
     c48:	0e 94 7e 07 	call	0xefc	; 0xefc <__fp_split3>
     c4c:	58 f3       	brcs	.-42     	; 0xc24 <__addsf3+0xc>
     c4e:	ba 17       	cp	r27, r26
     c50:	62 07       	cpc	r22, r18
     c52:	73 07       	cpc	r23, r19
     c54:	84 07       	cpc	r24, r20
     c56:	95 07       	cpc	r25, r21
     c58:	20 f0       	brcs	.+8      	; 0xc62 <__addsf3x+0x1c>
     c5a:	79 f4       	brne	.+30     	; 0xc7a <__addsf3x+0x34>
     c5c:	a6 f5       	brtc	.+104    	; 0xcc6 <__addsf3x+0x80>
     c5e:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_zero>
     c62:	0e f4       	brtc	.+2      	; 0xc66 <__addsf3x+0x20>
     c64:	e0 95       	com	r30
     c66:	0b 2e       	mov	r0, r27
     c68:	ba 2f       	mov	r27, r26
     c6a:	a0 2d       	mov	r26, r0
     c6c:	0b 01       	movw	r0, r22
     c6e:	b9 01       	movw	r22, r18
     c70:	90 01       	movw	r18, r0
     c72:	0c 01       	movw	r0, r24
     c74:	ca 01       	movw	r24, r20
     c76:	a0 01       	movw	r20, r0
     c78:	11 24       	eor	r1, r1
     c7a:	ff 27       	eor	r31, r31
     c7c:	59 1b       	sub	r21, r25
     c7e:	99 f0       	breq	.+38     	; 0xca6 <__addsf3x+0x60>
     c80:	59 3f       	cpi	r21, 0xF9	; 249
     c82:	50 f4       	brcc	.+20     	; 0xc98 <__addsf3x+0x52>
     c84:	50 3e       	cpi	r21, 0xE0	; 224
     c86:	68 f1       	brcs	.+90     	; 0xce2 <__addsf3x+0x9c>
     c88:	1a 16       	cp	r1, r26
     c8a:	f0 40       	sbci	r31, 0x00	; 0
     c8c:	a2 2f       	mov	r26, r18
     c8e:	23 2f       	mov	r18, r19
     c90:	34 2f       	mov	r19, r20
     c92:	44 27       	eor	r20, r20
     c94:	58 5f       	subi	r21, 0xF8	; 248
     c96:	f3 cf       	rjmp	.-26     	; 0xc7e <__addsf3x+0x38>
     c98:	46 95       	lsr	r20
     c9a:	37 95       	ror	r19
     c9c:	27 95       	ror	r18
     c9e:	a7 95       	ror	r26
     ca0:	f0 40       	sbci	r31, 0x00	; 0
     ca2:	53 95       	inc	r21
     ca4:	c9 f7       	brne	.-14     	; 0xc98 <__addsf3x+0x52>
     ca6:	7e f4       	brtc	.+30     	; 0xcc6 <__addsf3x+0x80>
     ca8:	1f 16       	cp	r1, r31
     caa:	ba 0b       	sbc	r27, r26
     cac:	62 0b       	sbc	r22, r18
     cae:	73 0b       	sbc	r23, r19
     cb0:	84 0b       	sbc	r24, r20
     cb2:	ba f0       	brmi	.+46     	; 0xce2 <__addsf3x+0x9c>
     cb4:	91 50       	subi	r25, 0x01	; 1
     cb6:	a1 f0       	breq	.+40     	; 0xce0 <__addsf3x+0x9a>
     cb8:	ff 0f       	add	r31, r31
     cba:	bb 1f       	adc	r27, r27
     cbc:	66 1f       	adc	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	88 1f       	adc	r24, r24
     cc2:	c2 f7       	brpl	.-16     	; 0xcb4 <__addsf3x+0x6e>
     cc4:	0e c0       	rjmp	.+28     	; 0xce2 <__addsf3x+0x9c>
     cc6:	ba 0f       	add	r27, r26
     cc8:	62 1f       	adc	r22, r18
     cca:	73 1f       	adc	r23, r19
     ccc:	84 1f       	adc	r24, r20
     cce:	48 f4       	brcc	.+18     	; 0xce2 <__addsf3x+0x9c>
     cd0:	87 95       	ror	r24
     cd2:	77 95       	ror	r23
     cd4:	67 95       	ror	r22
     cd6:	b7 95       	ror	r27
     cd8:	f7 95       	ror	r31
     cda:	9e 3f       	cpi	r25, 0xFE	; 254
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <__addsf3x+0x9a>
     cde:	b0 cf       	rjmp	.-160    	; 0xc40 <__addsf3+0x28>
     ce0:	93 95       	inc	r25
     ce2:	88 0f       	add	r24, r24
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <__addsf3x+0xa2>
     ce6:	99 27       	eor	r25, r25
     ce8:	ee 0f       	add	r30, r30
     cea:	97 95       	ror	r25
     cec:	87 95       	ror	r24
     cee:	08 95       	ret

00000cf0 <__divsf3>:
     cf0:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3x>
     cf4:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_round>
     cf8:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_pscB>
     cfc:	58 f0       	brcs	.+22     	; 0xd14 <__divsf3+0x24>
     cfe:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_pscA>
     d02:	40 f0       	brcs	.+16     	; 0xd14 <__divsf3+0x24>
     d04:	29 f4       	brne	.+10     	; 0xd10 <__divsf3+0x20>
     d06:	5f 3f       	cpi	r21, 0xFF	; 255
     d08:	29 f0       	breq	.+10     	; 0xd14 <__divsf3+0x24>
     d0a:	0c 94 56 07 	jmp	0xeac	; 0xeac <__fp_inf>
     d0e:	51 11       	cpse	r21, r1
     d10:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_szero>
     d14:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_nan>

00000d18 <__divsf3x>:
     d18:	0e 94 7e 07 	call	0xefc	; 0xefc <__fp_split3>
     d1c:	68 f3       	brcs	.-38     	; 0xcf8 <__divsf3+0x8>

00000d1e <__divsf3_pse>:
     d1e:	99 23       	and	r25, r25
     d20:	b1 f3       	breq	.-20     	; 0xd0e <__divsf3+0x1e>
     d22:	55 23       	and	r21, r21
     d24:	91 f3       	breq	.-28     	; 0xd0a <__divsf3+0x1a>
     d26:	95 1b       	sub	r25, r21
     d28:	55 0b       	sbc	r21, r21
     d2a:	bb 27       	eor	r27, r27
     d2c:	aa 27       	eor	r26, r26
     d2e:	62 17       	cp	r22, r18
     d30:	73 07       	cpc	r23, r19
     d32:	84 07       	cpc	r24, r20
     d34:	38 f0       	brcs	.+14     	; 0xd44 <__divsf3_pse+0x26>
     d36:	9f 5f       	subi	r25, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	44 1f       	adc	r20, r20
     d40:	aa 1f       	adc	r26, r26
     d42:	a9 f3       	breq	.-22     	; 0xd2e <__divsf3_pse+0x10>
     d44:	35 d0       	rcall	.+106    	; 0xdb0 <__divsf3_pse+0x92>
     d46:	0e 2e       	mov	r0, r30
     d48:	3a f0       	brmi	.+14     	; 0xd58 <__divsf3_pse+0x3a>
     d4a:	e0 e8       	ldi	r30, 0x80	; 128
     d4c:	32 d0       	rcall	.+100    	; 0xdb2 <__divsf3_pse+0x94>
     d4e:	91 50       	subi	r25, 0x01	; 1
     d50:	50 40       	sbci	r21, 0x00	; 0
     d52:	e6 95       	lsr	r30
     d54:	00 1c       	adc	r0, r0
     d56:	ca f7       	brpl	.-14     	; 0xd4a <__divsf3_pse+0x2c>
     d58:	2b d0       	rcall	.+86     	; 0xdb0 <__divsf3_pse+0x92>
     d5a:	fe 2f       	mov	r31, r30
     d5c:	29 d0       	rcall	.+82     	; 0xdb0 <__divsf3_pse+0x92>
     d5e:	66 0f       	add	r22, r22
     d60:	77 1f       	adc	r23, r23
     d62:	88 1f       	adc	r24, r24
     d64:	bb 1f       	adc	r27, r27
     d66:	26 17       	cp	r18, r22
     d68:	37 07       	cpc	r19, r23
     d6a:	48 07       	cpc	r20, r24
     d6c:	ab 07       	cpc	r26, r27
     d6e:	b0 e8       	ldi	r27, 0x80	; 128
     d70:	09 f0       	breq	.+2      	; 0xd74 <__divsf3_pse+0x56>
     d72:	bb 0b       	sbc	r27, r27
     d74:	80 2d       	mov	r24, r0
     d76:	bf 01       	movw	r22, r30
     d78:	ff 27       	eor	r31, r31
     d7a:	93 58       	subi	r25, 0x83	; 131
     d7c:	5f 4f       	sbci	r21, 0xFF	; 255
     d7e:	3a f0       	brmi	.+14     	; 0xd8e <__divsf3_pse+0x70>
     d80:	9e 3f       	cpi	r25, 0xFE	; 254
     d82:	51 05       	cpc	r21, r1
     d84:	78 f0       	brcs	.+30     	; 0xda4 <__divsf3_pse+0x86>
     d86:	0c 94 56 07 	jmp	0xeac	; 0xeac <__fp_inf>
     d8a:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_szero>
     d8e:	5f 3f       	cpi	r21, 0xFF	; 255
     d90:	e4 f3       	brlt	.-8      	; 0xd8a <__divsf3_pse+0x6c>
     d92:	98 3e       	cpi	r25, 0xE8	; 232
     d94:	d4 f3       	brlt	.-12     	; 0xd8a <__divsf3_pse+0x6c>
     d96:	86 95       	lsr	r24
     d98:	77 95       	ror	r23
     d9a:	67 95       	ror	r22
     d9c:	b7 95       	ror	r27
     d9e:	f7 95       	ror	r31
     da0:	9f 5f       	subi	r25, 0xFF	; 255
     da2:	c9 f7       	brne	.-14     	; 0xd96 <__divsf3_pse+0x78>
     da4:	88 0f       	add	r24, r24
     da6:	91 1d       	adc	r25, r1
     da8:	96 95       	lsr	r25
     daa:	87 95       	ror	r24
     dac:	97 f9       	bld	r25, 7
     dae:	08 95       	ret
     db0:	e1 e0       	ldi	r30, 0x01	; 1
     db2:	66 0f       	add	r22, r22
     db4:	77 1f       	adc	r23, r23
     db6:	88 1f       	adc	r24, r24
     db8:	bb 1f       	adc	r27, r27
     dba:	62 17       	cp	r22, r18
     dbc:	73 07       	cpc	r23, r19
     dbe:	84 07       	cpc	r24, r20
     dc0:	ba 07       	cpc	r27, r26
     dc2:	20 f0       	brcs	.+8      	; 0xdcc <__divsf3_pse+0xae>
     dc4:	62 1b       	sub	r22, r18
     dc6:	73 0b       	sbc	r23, r19
     dc8:	84 0b       	sbc	r24, r20
     dca:	ba 0b       	sbc	r27, r26
     dcc:	ee 1f       	adc	r30, r30
     dce:	88 f7       	brcc	.-30     	; 0xdb2 <__divsf3_pse+0x94>
     dd0:	e0 95       	com	r30
     dd2:	08 95       	ret

00000dd4 <__fixunssfsi>:
     dd4:	0e 94 86 07 	call	0xf0c	; 0xf0c <__fp_splitA>
     dd8:	88 f0       	brcs	.+34     	; 0xdfc <__fixunssfsi+0x28>
     dda:	9f 57       	subi	r25, 0x7F	; 127
     ddc:	98 f0       	brcs	.+38     	; 0xe04 <__fixunssfsi+0x30>
     dde:	b9 2f       	mov	r27, r25
     de0:	99 27       	eor	r25, r25
     de2:	b7 51       	subi	r27, 0x17	; 23
     de4:	b0 f0       	brcs	.+44     	; 0xe12 <__fixunssfsi+0x3e>
     de6:	e1 f0       	breq	.+56     	; 0xe20 <__fixunssfsi+0x4c>
     de8:	66 0f       	add	r22, r22
     dea:	77 1f       	adc	r23, r23
     dec:	88 1f       	adc	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	1a f0       	brmi	.+6      	; 0xdf8 <__fixunssfsi+0x24>
     df2:	ba 95       	dec	r27
     df4:	c9 f7       	brne	.-14     	; 0xde8 <__fixunssfsi+0x14>
     df6:	14 c0       	rjmp	.+40     	; 0xe20 <__fixunssfsi+0x4c>
     df8:	b1 30       	cpi	r27, 0x01	; 1
     dfa:	91 f0       	breq	.+36     	; 0xe20 <__fixunssfsi+0x4c>
     dfc:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fp_zero>
     e00:	b1 e0       	ldi	r27, 0x01	; 1
     e02:	08 95       	ret
     e04:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_zero>
     e08:	67 2f       	mov	r22, r23
     e0a:	78 2f       	mov	r23, r24
     e0c:	88 27       	eor	r24, r24
     e0e:	b8 5f       	subi	r27, 0xF8	; 248
     e10:	39 f0       	breq	.+14     	; 0xe20 <__fixunssfsi+0x4c>
     e12:	b9 3f       	cpi	r27, 0xF9	; 249
     e14:	cc f3       	brlt	.-14     	; 0xe08 <__fixunssfsi+0x34>
     e16:	86 95       	lsr	r24
     e18:	77 95       	ror	r23
     e1a:	67 95       	ror	r22
     e1c:	b3 95       	inc	r27
     e1e:	d9 f7       	brne	.-10     	; 0xe16 <__fixunssfsi+0x42>
     e20:	3e f4       	brtc	.+14     	; 0xe30 <__fixunssfsi+0x5c>
     e22:	90 95       	com	r25
     e24:	80 95       	com	r24
     e26:	70 95       	com	r23
     e28:	61 95       	neg	r22
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	8f 4f       	sbci	r24, 0xFF	; 255
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	08 95       	ret

00000e32 <__floatunsisf>:
     e32:	e8 94       	clt
     e34:	09 c0       	rjmp	.+18     	; 0xe48 <__floatsisf+0x12>

00000e36 <__floatsisf>:
     e36:	97 fb       	bst	r25, 7
     e38:	3e f4       	brtc	.+14     	; 0xe48 <__floatsisf+0x12>
     e3a:	90 95       	com	r25
     e3c:	80 95       	com	r24
     e3e:	70 95       	com	r23
     e40:	61 95       	neg	r22
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	8f 4f       	sbci	r24, 0xFF	; 255
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	99 23       	and	r25, r25
     e4a:	a9 f0       	breq	.+42     	; 0xe76 <__floatsisf+0x40>
     e4c:	f9 2f       	mov	r31, r25
     e4e:	96 e9       	ldi	r25, 0x96	; 150
     e50:	bb 27       	eor	r27, r27
     e52:	93 95       	inc	r25
     e54:	f6 95       	lsr	r31
     e56:	87 95       	ror	r24
     e58:	77 95       	ror	r23
     e5a:	67 95       	ror	r22
     e5c:	b7 95       	ror	r27
     e5e:	f1 11       	cpse	r31, r1
     e60:	f8 cf       	rjmp	.-16     	; 0xe52 <__floatsisf+0x1c>
     e62:	fa f4       	brpl	.+62     	; 0xea2 <__floatsisf+0x6c>
     e64:	bb 0f       	add	r27, r27
     e66:	11 f4       	brne	.+4      	; 0xe6c <__floatsisf+0x36>
     e68:	60 ff       	sbrs	r22, 0
     e6a:	1b c0       	rjmp	.+54     	; 0xea2 <__floatsisf+0x6c>
     e6c:	6f 5f       	subi	r22, 0xFF	; 255
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	8f 4f       	sbci	r24, 0xFF	; 255
     e72:	9f 4f       	sbci	r25, 0xFF	; 255
     e74:	16 c0       	rjmp	.+44     	; 0xea2 <__floatsisf+0x6c>
     e76:	88 23       	and	r24, r24
     e78:	11 f0       	breq	.+4      	; 0xe7e <__floatsisf+0x48>
     e7a:	96 e9       	ldi	r25, 0x96	; 150
     e7c:	11 c0       	rjmp	.+34     	; 0xea0 <__floatsisf+0x6a>
     e7e:	77 23       	and	r23, r23
     e80:	21 f0       	breq	.+8      	; 0xe8a <__floatsisf+0x54>
     e82:	9e e8       	ldi	r25, 0x8E	; 142
     e84:	87 2f       	mov	r24, r23
     e86:	76 2f       	mov	r23, r22
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <__floatsisf+0x5e>
     e8a:	66 23       	and	r22, r22
     e8c:	71 f0       	breq	.+28     	; 0xeaa <__floatsisf+0x74>
     e8e:	96 e8       	ldi	r25, 0x86	; 134
     e90:	86 2f       	mov	r24, r22
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	2a f0       	brmi	.+10     	; 0xea2 <__floatsisf+0x6c>
     e98:	9a 95       	dec	r25
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	da f7       	brpl	.-10     	; 0xe98 <__floatsisf+0x62>
     ea2:	88 0f       	add	r24, r24
     ea4:	96 95       	lsr	r25
     ea6:	87 95       	ror	r24
     ea8:	97 f9       	bld	r25, 7
     eaa:	08 95       	ret

00000eac <__fp_inf>:
     eac:	97 f9       	bld	r25, 7
     eae:	9f 67       	ori	r25, 0x7F	; 127
     eb0:	80 e8       	ldi	r24, 0x80	; 128
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	08 95       	ret

00000eb8 <__fp_nan>:
     eb8:	9f ef       	ldi	r25, 0xFF	; 255
     eba:	80 ec       	ldi	r24, 0xC0	; 192
     ebc:	08 95       	ret

00000ebe <__fp_pscA>:
     ebe:	00 24       	eor	r0, r0
     ec0:	0a 94       	dec	r0
     ec2:	16 16       	cp	r1, r22
     ec4:	17 06       	cpc	r1, r23
     ec6:	18 06       	cpc	r1, r24
     ec8:	09 06       	cpc	r0, r25
     eca:	08 95       	ret

00000ecc <__fp_pscB>:
     ecc:	00 24       	eor	r0, r0
     ece:	0a 94       	dec	r0
     ed0:	12 16       	cp	r1, r18
     ed2:	13 06       	cpc	r1, r19
     ed4:	14 06       	cpc	r1, r20
     ed6:	05 06       	cpc	r0, r21
     ed8:	08 95       	ret

00000eda <__fp_round>:
     eda:	09 2e       	mov	r0, r25
     edc:	03 94       	inc	r0
     ede:	00 0c       	add	r0, r0
     ee0:	11 f4       	brne	.+4      	; 0xee6 <__fp_round+0xc>
     ee2:	88 23       	and	r24, r24
     ee4:	52 f0       	brmi	.+20     	; 0xefa <__fp_round+0x20>
     ee6:	bb 0f       	add	r27, r27
     ee8:	40 f4       	brcc	.+16     	; 0xefa <__fp_round+0x20>
     eea:	bf 2b       	or	r27, r31
     eec:	11 f4       	brne	.+4      	; 0xef2 <__fp_round+0x18>
     eee:	60 ff       	sbrs	r22, 0
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <__fp_round+0x20>
     ef2:	6f 5f       	subi	r22, 0xFF	; 255
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	08 95       	ret

00000efc <__fp_split3>:
     efc:	57 fd       	sbrc	r21, 7
     efe:	90 58       	subi	r25, 0x80	; 128
     f00:	44 0f       	add	r20, r20
     f02:	55 1f       	adc	r21, r21
     f04:	59 f0       	breq	.+22     	; 0xf1c <__fp_splitA+0x10>
     f06:	5f 3f       	cpi	r21, 0xFF	; 255
     f08:	71 f0       	breq	.+28     	; 0xf26 <__fp_splitA+0x1a>
     f0a:	47 95       	ror	r20

00000f0c <__fp_splitA>:
     f0c:	88 0f       	add	r24, r24
     f0e:	97 fb       	bst	r25, 7
     f10:	99 1f       	adc	r25, r25
     f12:	61 f0       	breq	.+24     	; 0xf2c <__fp_splitA+0x20>
     f14:	9f 3f       	cpi	r25, 0xFF	; 255
     f16:	79 f0       	breq	.+30     	; 0xf36 <__fp_splitA+0x2a>
     f18:	87 95       	ror	r24
     f1a:	08 95       	ret
     f1c:	12 16       	cp	r1, r18
     f1e:	13 06       	cpc	r1, r19
     f20:	14 06       	cpc	r1, r20
     f22:	55 1f       	adc	r21, r21
     f24:	f2 cf       	rjmp	.-28     	; 0xf0a <__fp_split3+0xe>
     f26:	46 95       	lsr	r20
     f28:	f1 df       	rcall	.-30     	; 0xf0c <__fp_splitA>
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <__fp_splitA+0x30>
     f2c:	16 16       	cp	r1, r22
     f2e:	17 06       	cpc	r1, r23
     f30:	18 06       	cpc	r1, r24
     f32:	99 1f       	adc	r25, r25
     f34:	f1 cf       	rjmp	.-30     	; 0xf18 <__fp_splitA+0xc>
     f36:	86 95       	lsr	r24
     f38:	71 05       	cpc	r23, r1
     f3a:	61 05       	cpc	r22, r1
     f3c:	08 94       	sec
     f3e:	08 95       	ret

00000f40 <__fp_zero>:
     f40:	e8 94       	clt

00000f42 <__fp_szero>:
     f42:	bb 27       	eor	r27, r27
     f44:	66 27       	eor	r22, r22
     f46:	77 27       	eor	r23, r23
     f48:	cb 01       	movw	r24, r22
     f4a:	97 f9       	bld	r25, 7
     f4c:	08 95       	ret

00000f4e <__mulsf3>:
     f4e:	0e 94 ba 07 	call	0xf74	; 0xf74 <__mulsf3x>
     f52:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_round>
     f56:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_pscA>
     f5a:	38 f0       	brcs	.+14     	; 0xf6a <__mulsf3+0x1c>
     f5c:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_pscB>
     f60:	20 f0       	brcs	.+8      	; 0xf6a <__mulsf3+0x1c>
     f62:	95 23       	and	r25, r21
     f64:	11 f0       	breq	.+4      	; 0xf6a <__mulsf3+0x1c>
     f66:	0c 94 56 07 	jmp	0xeac	; 0xeac <__fp_inf>
     f6a:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_nan>
     f6e:	11 24       	eor	r1, r1
     f70:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_szero>

00000f74 <__mulsf3x>:
     f74:	0e 94 7e 07 	call	0xefc	; 0xefc <__fp_split3>
     f78:	70 f3       	brcs	.-36     	; 0xf56 <__mulsf3+0x8>

00000f7a <__mulsf3_pse>:
     f7a:	95 9f       	mul	r25, r21
     f7c:	c1 f3       	breq	.-16     	; 0xf6e <__mulsf3+0x20>
     f7e:	95 0f       	add	r25, r21
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	55 1f       	adc	r21, r21
     f84:	62 9f       	mul	r22, r18
     f86:	f0 01       	movw	r30, r0
     f88:	72 9f       	mul	r23, r18
     f8a:	bb 27       	eor	r27, r27
     f8c:	f0 0d       	add	r31, r0
     f8e:	b1 1d       	adc	r27, r1
     f90:	63 9f       	mul	r22, r19
     f92:	aa 27       	eor	r26, r26
     f94:	f0 0d       	add	r31, r0
     f96:	b1 1d       	adc	r27, r1
     f98:	aa 1f       	adc	r26, r26
     f9a:	64 9f       	mul	r22, r20
     f9c:	66 27       	eor	r22, r22
     f9e:	b0 0d       	add	r27, r0
     fa0:	a1 1d       	adc	r26, r1
     fa2:	66 1f       	adc	r22, r22
     fa4:	82 9f       	mul	r24, r18
     fa6:	22 27       	eor	r18, r18
     fa8:	b0 0d       	add	r27, r0
     faa:	a1 1d       	adc	r26, r1
     fac:	62 1f       	adc	r22, r18
     fae:	73 9f       	mul	r23, r19
     fb0:	b0 0d       	add	r27, r0
     fb2:	a1 1d       	adc	r26, r1
     fb4:	62 1f       	adc	r22, r18
     fb6:	83 9f       	mul	r24, r19
     fb8:	a0 0d       	add	r26, r0
     fba:	61 1d       	adc	r22, r1
     fbc:	22 1f       	adc	r18, r18
     fbe:	74 9f       	mul	r23, r20
     fc0:	33 27       	eor	r19, r19
     fc2:	a0 0d       	add	r26, r0
     fc4:	61 1d       	adc	r22, r1
     fc6:	23 1f       	adc	r18, r19
     fc8:	84 9f       	mul	r24, r20
     fca:	60 0d       	add	r22, r0
     fcc:	21 1d       	adc	r18, r1
     fce:	82 2f       	mov	r24, r18
     fd0:	76 2f       	mov	r23, r22
     fd2:	6a 2f       	mov	r22, r26
     fd4:	11 24       	eor	r1, r1
     fd6:	9f 57       	subi	r25, 0x7F	; 127
     fd8:	50 40       	sbci	r21, 0x00	; 0
     fda:	9a f0       	brmi	.+38     	; 0x1002 <__mulsf3_pse+0x88>
     fdc:	f1 f0       	breq	.+60     	; 0x101a <__mulsf3_pse+0xa0>
     fde:	88 23       	and	r24, r24
     fe0:	4a f0       	brmi	.+18     	; 0xff4 <__mulsf3_pse+0x7a>
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	bb 1f       	adc	r27, r27
     fe8:	66 1f       	adc	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	88 1f       	adc	r24, r24
     fee:	91 50       	subi	r25, 0x01	; 1
     ff0:	50 40       	sbci	r21, 0x00	; 0
     ff2:	a9 f7       	brne	.-22     	; 0xfde <__mulsf3_pse+0x64>
     ff4:	9e 3f       	cpi	r25, 0xFE	; 254
     ff6:	51 05       	cpc	r21, r1
     ff8:	80 f0       	brcs	.+32     	; 0x101a <__mulsf3_pse+0xa0>
     ffa:	0c 94 56 07 	jmp	0xeac	; 0xeac <__fp_inf>
     ffe:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_szero>
    1002:	5f 3f       	cpi	r21, 0xFF	; 255
    1004:	e4 f3       	brlt	.-8      	; 0xffe <__mulsf3_pse+0x84>
    1006:	98 3e       	cpi	r25, 0xE8	; 232
    1008:	d4 f3       	brlt	.-12     	; 0xffe <__mulsf3_pse+0x84>
    100a:	86 95       	lsr	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f7 95       	ror	r31
    1014:	e7 95       	ror	r30
    1016:	9f 5f       	subi	r25, 0xFF	; 255
    1018:	c1 f7       	brne	.-16     	; 0x100a <__mulsf3_pse+0x90>
    101a:	fe 2b       	or	r31, r30
    101c:	88 0f       	add	r24, r24
    101e:	91 1d       	adc	r25, r1
    1020:	96 95       	lsr	r25
    1022:	87 95       	ror	r24
    1024:	97 f9       	bld	r25, 7
    1026:	08 95       	ret

00001028 <vfprintf>:
    1028:	a0 e1       	ldi	r26, 0x10	; 16
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e1       	ldi	r30, 0x1A	; 26
    102e:	f8 e0       	ldi	r31, 0x08	; 8
    1030:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__prologue_saves__>
    1034:	7c 01       	movw	r14, r24
    1036:	1b 01       	movw	r2, r22
    1038:	6a 01       	movw	r12, r20
    103a:	fc 01       	movw	r30, r24
    103c:	17 82       	std	Z+7, r1	; 0x07
    103e:	16 82       	std	Z+6, r1	; 0x06
    1040:	83 81       	ldd	r24, Z+3	; 0x03
    1042:	81 ff       	sbrs	r24, 1
    1044:	44 c3       	rjmp	.+1672   	; 0x16ce <vfprintf+0x6a6>
    1046:	9e 01       	movw	r18, r28
    1048:	2f 5f       	subi	r18, 0xFF	; 255
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	39 01       	movw	r6, r18
    104e:	f7 01       	movw	r30, r14
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	f1 01       	movw	r30, r2
    1054:	93 fd       	sbrc	r25, 3
    1056:	85 91       	lpm	r24, Z+
    1058:	93 ff       	sbrs	r25, 3
    105a:	81 91       	ld	r24, Z+
    105c:	1f 01       	movw	r2, r30
    105e:	88 23       	and	r24, r24
    1060:	09 f4       	brne	.+2      	; 0x1064 <vfprintf+0x3c>
    1062:	31 c3       	rjmp	.+1634   	; 0x16c6 <vfprintf+0x69e>
    1064:	85 32       	cpi	r24, 0x25	; 37
    1066:	39 f4       	brne	.+14     	; 0x1076 <vfprintf+0x4e>
    1068:	93 fd       	sbrc	r25, 3
    106a:	85 91       	lpm	r24, Z+
    106c:	93 ff       	sbrs	r25, 3
    106e:	81 91       	ld	r24, Z+
    1070:	1f 01       	movw	r2, r30
    1072:	85 32       	cpi	r24, 0x25	; 37
    1074:	39 f4       	brne	.+14     	; 0x1084 <vfprintf+0x5c>
    1076:	b7 01       	movw	r22, r14
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    107e:	56 01       	movw	r10, r12
    1080:	65 01       	movw	r12, r10
    1082:	e5 cf       	rjmp	.-54     	; 0x104e <vfprintf+0x26>
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	51 2c       	mov	r5, r1
    1088:	91 2c       	mov	r9, r1
    108a:	ff e1       	ldi	r31, 0x1F	; 31
    108c:	f9 15       	cp	r31, r9
    108e:	d8 f0       	brcs	.+54     	; 0x10c6 <vfprintf+0x9e>
    1090:	8b 32       	cpi	r24, 0x2B	; 43
    1092:	79 f0       	breq	.+30     	; 0x10b2 <vfprintf+0x8a>
    1094:	38 f4       	brcc	.+14     	; 0x10a4 <vfprintf+0x7c>
    1096:	80 32       	cpi	r24, 0x20	; 32
    1098:	79 f0       	breq	.+30     	; 0x10b8 <vfprintf+0x90>
    109a:	83 32       	cpi	r24, 0x23	; 35
    109c:	a1 f4       	brne	.+40     	; 0x10c6 <vfprintf+0x9e>
    109e:	f9 2d       	mov	r31, r9
    10a0:	f0 61       	ori	r31, 0x10	; 16
    10a2:	2e c0       	rjmp	.+92     	; 0x1100 <vfprintf+0xd8>
    10a4:	8d 32       	cpi	r24, 0x2D	; 45
    10a6:	61 f0       	breq	.+24     	; 0x10c0 <vfprintf+0x98>
    10a8:	80 33       	cpi	r24, 0x30	; 48
    10aa:	69 f4       	brne	.+26     	; 0x10c6 <vfprintf+0x9e>
    10ac:	29 2d       	mov	r18, r9
    10ae:	21 60       	ori	r18, 0x01	; 1
    10b0:	2d c0       	rjmp	.+90     	; 0x110c <vfprintf+0xe4>
    10b2:	39 2d       	mov	r19, r9
    10b4:	32 60       	ori	r19, 0x02	; 2
    10b6:	93 2e       	mov	r9, r19
    10b8:	89 2d       	mov	r24, r9
    10ba:	84 60       	ori	r24, 0x04	; 4
    10bc:	98 2e       	mov	r9, r24
    10be:	2a c0       	rjmp	.+84     	; 0x1114 <vfprintf+0xec>
    10c0:	e9 2d       	mov	r30, r9
    10c2:	e8 60       	ori	r30, 0x08	; 8
    10c4:	15 c0       	rjmp	.+42     	; 0x10f0 <vfprintf+0xc8>
    10c6:	97 fc       	sbrc	r9, 7
    10c8:	2d c0       	rjmp	.+90     	; 0x1124 <vfprintf+0xfc>
    10ca:	20 ed       	ldi	r18, 0xD0	; 208
    10cc:	28 0f       	add	r18, r24
    10ce:	2a 30       	cpi	r18, 0x0A	; 10
    10d0:	88 f4       	brcc	.+34     	; 0x10f4 <vfprintf+0xcc>
    10d2:	96 fe       	sbrs	r9, 6
    10d4:	06 c0       	rjmp	.+12     	; 0x10e2 <vfprintf+0xba>
    10d6:	3a e0       	ldi	r19, 0x0A	; 10
    10d8:	13 9f       	mul	r17, r19
    10da:	20 0d       	add	r18, r0
    10dc:	11 24       	eor	r1, r1
    10de:	12 2f       	mov	r17, r18
    10e0:	19 c0       	rjmp	.+50     	; 0x1114 <vfprintf+0xec>
    10e2:	8a e0       	ldi	r24, 0x0A	; 10
    10e4:	58 9e       	mul	r5, r24
    10e6:	20 0d       	add	r18, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	52 2e       	mov	r5, r18
    10ec:	e9 2d       	mov	r30, r9
    10ee:	e0 62       	ori	r30, 0x20	; 32
    10f0:	9e 2e       	mov	r9, r30
    10f2:	10 c0       	rjmp	.+32     	; 0x1114 <vfprintf+0xec>
    10f4:	8e 32       	cpi	r24, 0x2E	; 46
    10f6:	31 f4       	brne	.+12     	; 0x1104 <vfprintf+0xdc>
    10f8:	96 fc       	sbrc	r9, 6
    10fa:	e5 c2       	rjmp	.+1482   	; 0x16c6 <vfprintf+0x69e>
    10fc:	f9 2d       	mov	r31, r9
    10fe:	f0 64       	ori	r31, 0x40	; 64
    1100:	9f 2e       	mov	r9, r31
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <vfprintf+0xec>
    1104:	8c 36       	cpi	r24, 0x6C	; 108
    1106:	21 f4       	brne	.+8      	; 0x1110 <vfprintf+0xe8>
    1108:	29 2d       	mov	r18, r9
    110a:	20 68       	ori	r18, 0x80	; 128
    110c:	92 2e       	mov	r9, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <vfprintf+0xec>
    1110:	88 36       	cpi	r24, 0x68	; 104
    1112:	41 f4       	brne	.+16     	; 0x1124 <vfprintf+0xfc>
    1114:	f1 01       	movw	r30, r2
    1116:	93 fd       	sbrc	r25, 3
    1118:	85 91       	lpm	r24, Z+
    111a:	93 ff       	sbrs	r25, 3
    111c:	81 91       	ld	r24, Z+
    111e:	1f 01       	movw	r2, r30
    1120:	81 11       	cpse	r24, r1
    1122:	b3 cf       	rjmp	.-154    	; 0x108a <vfprintf+0x62>
    1124:	9b eb       	ldi	r25, 0xBB	; 187
    1126:	98 0f       	add	r25, r24
    1128:	93 30       	cpi	r25, 0x03	; 3
    112a:	20 f4       	brcc	.+8      	; 0x1134 <vfprintf+0x10c>
    112c:	99 2d       	mov	r25, r9
    112e:	90 61       	ori	r25, 0x10	; 16
    1130:	80 5e       	subi	r24, 0xE0	; 224
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <vfprintf+0x11a>
    1134:	9b e9       	ldi	r25, 0x9B	; 155
    1136:	98 0f       	add	r25, r24
    1138:	93 30       	cpi	r25, 0x03	; 3
    113a:	08 f0       	brcs	.+2      	; 0x113e <vfprintf+0x116>
    113c:	66 c1       	rjmp	.+716    	; 0x140a <vfprintf+0x3e2>
    113e:	99 2d       	mov	r25, r9
    1140:	9f 7e       	andi	r25, 0xEF	; 239
    1142:	96 ff       	sbrs	r25, 6
    1144:	16 e0       	ldi	r17, 0x06	; 6
    1146:	9f 73       	andi	r25, 0x3F	; 63
    1148:	99 2e       	mov	r9, r25
    114a:	85 36       	cpi	r24, 0x65	; 101
    114c:	19 f4       	brne	.+6      	; 0x1154 <vfprintf+0x12c>
    114e:	90 64       	ori	r25, 0x40	; 64
    1150:	99 2e       	mov	r9, r25
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <vfprintf+0x13c>
    1154:	86 36       	cpi	r24, 0x66	; 102
    1156:	21 f4       	brne	.+8      	; 0x1160 <vfprintf+0x138>
    1158:	39 2f       	mov	r19, r25
    115a:	30 68       	ori	r19, 0x80	; 128
    115c:	93 2e       	mov	r9, r19
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <vfprintf+0x13c>
    1160:	11 11       	cpse	r17, r1
    1162:	11 50       	subi	r17, 0x01	; 1
    1164:	97 fe       	sbrs	r9, 7
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <vfprintf+0x14e>
    1168:	1c 33       	cpi	r17, 0x3C	; 60
    116a:	50 f4       	brcc	.+20     	; 0x1180 <vfprintf+0x158>
    116c:	44 24       	eor	r4, r4
    116e:	43 94       	inc	r4
    1170:	41 0e       	add	r4, r17
    1172:	27 e0       	ldi	r18, 0x07	; 7
    1174:	0b c0       	rjmp	.+22     	; 0x118c <vfprintf+0x164>
    1176:	18 30       	cpi	r17, 0x08	; 8
    1178:	38 f0       	brcs	.+14     	; 0x1188 <vfprintf+0x160>
    117a:	27 e0       	ldi	r18, 0x07	; 7
    117c:	17 e0       	ldi	r17, 0x07	; 7
    117e:	05 c0       	rjmp	.+10     	; 0x118a <vfprintf+0x162>
    1180:	27 e0       	ldi	r18, 0x07	; 7
    1182:	9c e3       	ldi	r25, 0x3C	; 60
    1184:	49 2e       	mov	r4, r25
    1186:	02 c0       	rjmp	.+4      	; 0x118c <vfprintf+0x164>
    1188:	21 2f       	mov	r18, r17
    118a:	41 2c       	mov	r4, r1
    118c:	56 01       	movw	r10, r12
    118e:	84 e0       	ldi	r24, 0x04	; 4
    1190:	a8 0e       	add	r10, r24
    1192:	b1 1c       	adc	r11, r1
    1194:	f6 01       	movw	r30, r12
    1196:	60 81       	ld	r22, Z
    1198:	71 81       	ldd	r23, Z+1	; 0x01
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	04 2d       	mov	r16, r4
    11a0:	a3 01       	movw	r20, r6
    11a2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__ftoa_engine>
    11a6:	6c 01       	movw	r12, r24
    11a8:	f9 81       	ldd	r31, Y+1	; 0x01
    11aa:	fc 87       	std	Y+12, r31	; 0x0c
    11ac:	f0 ff       	sbrs	r31, 0
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <vfprintf+0x18c>
    11b0:	f3 ff       	sbrs	r31, 3
    11b2:	06 c0       	rjmp	.+12     	; 0x11c0 <vfprintf+0x198>
    11b4:	91 fc       	sbrc	r9, 1
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <vfprintf+0x19c>
    11b8:	92 fe       	sbrs	r9, 2
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <vfprintf+0x1a0>
    11bc:	00 e2       	ldi	r16, 0x20	; 32
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <vfprintf+0x1a2>
    11c0:	0d e2       	ldi	r16, 0x2D	; 45
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <vfprintf+0x1a2>
    11c4:	0b e2       	ldi	r16, 0x2B	; 43
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <vfprintf+0x1a2>
    11c8:	00 e0       	ldi	r16, 0x00	; 0
    11ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    11cc:	8c 70       	andi	r24, 0x0C	; 12
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <vfprintf+0x1ae>
    11d0:	01 11       	cpse	r16, r1
    11d2:	5a c2       	rjmp	.+1204   	; 0x1688 <vfprintf+0x660>
    11d4:	9b c2       	rjmp	.+1334   	; 0x170c <vfprintf+0x6e4>
    11d6:	97 fe       	sbrs	r9, 7
    11d8:	10 c0       	rjmp	.+32     	; 0x11fa <vfprintf+0x1d2>
    11da:	4c 0c       	add	r4, r12
    11dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    11de:	f4 ff       	sbrs	r31, 4
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <vfprintf+0x1c2>
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	81 33       	cpi	r24, 0x31	; 49
    11e6:	09 f4       	brne	.+2      	; 0x11ea <vfprintf+0x1c2>
    11e8:	4a 94       	dec	r4
    11ea:	14 14       	cp	r1, r4
    11ec:	74 f5       	brge	.+92     	; 0x124a <vfprintf+0x222>
    11ee:	28 e0       	ldi	r18, 0x08	; 8
    11f0:	24 15       	cp	r18, r4
    11f2:	78 f5       	brcc	.+94     	; 0x1252 <vfprintf+0x22a>
    11f4:	88 e0       	ldi	r24, 0x08	; 8
    11f6:	48 2e       	mov	r4, r24
    11f8:	2c c0       	rjmp	.+88     	; 0x1252 <vfprintf+0x22a>
    11fa:	96 fc       	sbrc	r9, 6
    11fc:	2a c0       	rjmp	.+84     	; 0x1252 <vfprintf+0x22a>
    11fe:	81 2f       	mov	r24, r17
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	8c 15       	cp	r24, r12
    1204:	9d 05       	cpc	r25, r13
    1206:	9c f0       	brlt	.+38     	; 0x122e <vfprintf+0x206>
    1208:	3c ef       	ldi	r19, 0xFC	; 252
    120a:	c3 16       	cp	r12, r19
    120c:	3f ef       	ldi	r19, 0xFF	; 255
    120e:	d3 06       	cpc	r13, r19
    1210:	74 f0       	brlt	.+28     	; 0x122e <vfprintf+0x206>
    1212:	89 2d       	mov	r24, r9
    1214:	80 68       	ori	r24, 0x80	; 128
    1216:	98 2e       	mov	r9, r24
    1218:	0a c0       	rjmp	.+20     	; 0x122e <vfprintf+0x206>
    121a:	e2 e0       	ldi	r30, 0x02	; 2
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	ec 0f       	add	r30, r28
    1220:	fd 1f       	adc	r31, r29
    1222:	e1 0f       	add	r30, r17
    1224:	f1 1d       	adc	r31, r1
    1226:	80 81       	ld	r24, Z
    1228:	80 33       	cpi	r24, 0x30	; 48
    122a:	19 f4       	brne	.+6      	; 0x1232 <vfprintf+0x20a>
    122c:	11 50       	subi	r17, 0x01	; 1
    122e:	11 11       	cpse	r17, r1
    1230:	f4 cf       	rjmp	.-24     	; 0x121a <vfprintf+0x1f2>
    1232:	97 fe       	sbrs	r9, 7
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <vfprintf+0x22a>
    1236:	44 24       	eor	r4, r4
    1238:	43 94       	inc	r4
    123a:	41 0e       	add	r4, r17
    123c:	81 2f       	mov	r24, r17
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	c8 16       	cp	r12, r24
    1242:	d9 06       	cpc	r13, r25
    1244:	2c f4       	brge	.+10     	; 0x1250 <vfprintf+0x228>
    1246:	1c 19       	sub	r17, r12
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <vfprintf+0x22a>
    124a:	44 24       	eor	r4, r4
    124c:	43 94       	inc	r4
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <vfprintf+0x22a>
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	97 fe       	sbrs	r9, 7
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <vfprintf+0x23a>
    1256:	1c 14       	cp	r1, r12
    1258:	1d 04       	cpc	r1, r13
    125a:	34 f4       	brge	.+12     	; 0x1268 <vfprintf+0x240>
    125c:	c6 01       	movw	r24, r12
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	05 c0       	rjmp	.+10     	; 0x126c <vfprintf+0x244>
    1262:	85 e0       	ldi	r24, 0x05	; 5
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x244>
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	01 11       	cpse	r16, r1
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	11 23       	and	r17, r17
    1272:	31 f0       	breq	.+12     	; 0x1280 <vfprintf+0x258>
    1274:	21 2f       	mov	r18, r17
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	2f 5f       	subi	r18, 0xFF	; 255
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	25 2d       	mov	r18, r5
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	82 17       	cp	r24, r18
    1286:	93 07       	cpc	r25, r19
    1288:	14 f4       	brge	.+4      	; 0x128e <vfprintf+0x266>
    128a:	58 1a       	sub	r5, r24
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <vfprintf+0x268>
    128e:	51 2c       	mov	r5, r1
    1290:	89 2d       	mov	r24, r9
    1292:	89 70       	andi	r24, 0x09	; 9
    1294:	49 f4       	brne	.+18     	; 0x12a8 <vfprintf+0x280>
    1296:	55 20       	and	r5, r5
    1298:	39 f0       	breq	.+14     	; 0x12a8 <vfprintf+0x280>
    129a:	b7 01       	movw	r22, r14
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    12a4:	5a 94       	dec	r5
    12a6:	f7 cf       	rjmp	.-18     	; 0x1296 <vfprintf+0x26e>
    12a8:	00 23       	and	r16, r16
    12aa:	29 f0       	breq	.+10     	; 0x12b6 <vfprintf+0x28e>
    12ac:	b7 01       	movw	r22, r14
    12ae:	80 2f       	mov	r24, r16
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    12b6:	93 fc       	sbrc	r9, 3
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <vfprintf+0x2a4>
    12ba:	55 20       	and	r5, r5
    12bc:	39 f0       	breq	.+14     	; 0x12cc <vfprintf+0x2a4>
    12be:	b7 01       	movw	r22, r14
    12c0:	80 e3       	ldi	r24, 0x30	; 48
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    12c8:	5a 94       	dec	r5
    12ca:	f7 cf       	rjmp	.-18     	; 0x12ba <vfprintf+0x292>
    12cc:	97 fe       	sbrs	r9, 7
    12ce:	4c c0       	rjmp	.+152    	; 0x1368 <vfprintf+0x340>
    12d0:	46 01       	movw	r8, r12
    12d2:	d7 fe       	sbrs	r13, 7
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <vfprintf+0x2b2>
    12d6:	81 2c       	mov	r8, r1
    12d8:	91 2c       	mov	r9, r1
    12da:	c6 01       	movw	r24, r12
    12dc:	88 19       	sub	r24, r8
    12de:	99 09       	sbc	r25, r9
    12e0:	f3 01       	movw	r30, r6
    12e2:	e8 0f       	add	r30, r24
    12e4:	f9 1f       	adc	r31, r25
    12e6:	fe 87       	std	Y+14, r31	; 0x0e
    12e8:	ed 87       	std	Y+13, r30	; 0x0d
    12ea:	96 01       	movw	r18, r12
    12ec:	24 19       	sub	r18, r4
    12ee:	31 09       	sbc	r19, r1
    12f0:	38 8b       	std	Y+16, r19	; 0x10
    12f2:	2f 87       	std	Y+15, r18	; 0x0f
    12f4:	01 2f       	mov	r16, r17
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	11 95       	neg	r17
    12fa:	01 95       	neg	r16
    12fc:	11 09       	sbc	r17, r1
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	83 16       	cp	r8, r19
    1302:	93 06       	cpc	r9, r19
    1304:	29 f4       	brne	.+10     	; 0x1310 <vfprintf+0x2e8>
    1306:	b7 01       	movw	r22, r14
    1308:	8e e2       	ldi	r24, 0x2E	; 46
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    1310:	c8 14       	cp	r12, r8
    1312:	d9 04       	cpc	r13, r9
    1314:	4c f0       	brlt	.+18     	; 0x1328 <vfprintf+0x300>
    1316:	8f 85       	ldd	r24, Y+15	; 0x0f
    1318:	98 89       	ldd	r25, Y+16	; 0x10
    131a:	88 15       	cp	r24, r8
    131c:	99 05       	cpc	r25, r9
    131e:	24 f4       	brge	.+8      	; 0x1328 <vfprintf+0x300>
    1320:	ed 85       	ldd	r30, Y+13	; 0x0d
    1322:	fe 85       	ldd	r31, Y+14	; 0x0e
    1324:	81 81       	ldd	r24, Z+1	; 0x01
    1326:	01 c0       	rjmp	.+2      	; 0x132a <vfprintf+0x302>
    1328:	80 e3       	ldi	r24, 0x30	; 48
    132a:	f1 e0       	ldi	r31, 0x01	; 1
    132c:	8f 1a       	sub	r8, r31
    132e:	91 08       	sbc	r9, r1
    1330:	2d 85       	ldd	r18, Y+13	; 0x0d
    1332:	3e 85       	ldd	r19, Y+14	; 0x0e
    1334:	2f 5f       	subi	r18, 0xFF	; 255
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	3e 87       	std	Y+14, r19	; 0x0e
    133a:	2d 87       	std	Y+13, r18	; 0x0d
    133c:	80 16       	cp	r8, r16
    133e:	91 06       	cpc	r9, r17
    1340:	2c f0       	brlt	.+10     	; 0x134c <vfprintf+0x324>
    1342:	b7 01       	movw	r22, r14
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    134a:	d9 cf       	rjmp	.-78     	; 0x12fe <vfprintf+0x2d6>
    134c:	c8 14       	cp	r12, r8
    134e:	d9 04       	cpc	r13, r9
    1350:	41 f4       	brne	.+16     	; 0x1362 <vfprintf+0x33a>
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	96 33       	cpi	r25, 0x36	; 54
    1356:	20 f4       	brcc	.+8      	; 0x1360 <vfprintf+0x338>
    1358:	95 33       	cpi	r25, 0x35	; 53
    135a:	19 f4       	brne	.+6      	; 0x1362 <vfprintf+0x33a>
    135c:	3c 85       	ldd	r19, Y+12	; 0x0c
    135e:	34 ff       	sbrs	r19, 4
    1360:	81 e3       	ldi	r24, 0x31	; 49
    1362:	b7 01       	movw	r22, r14
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	4e c0       	rjmp	.+156    	; 0x1404 <vfprintf+0x3dc>
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	81 33       	cpi	r24, 0x31	; 49
    136c:	19 f0       	breq	.+6      	; 0x1374 <vfprintf+0x34c>
    136e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1370:	9f 7e       	andi	r25, 0xEF	; 239
    1372:	9c 87       	std	Y+12, r25	; 0x0c
    1374:	b7 01       	movw	r22, r14
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    137c:	11 11       	cpse	r17, r1
    137e:	05 c0       	rjmp	.+10     	; 0x138a <vfprintf+0x362>
    1380:	94 fc       	sbrc	r9, 4
    1382:	18 c0       	rjmp	.+48     	; 0x13b4 <vfprintf+0x38c>
    1384:	85 e6       	ldi	r24, 0x65	; 101
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	17 c0       	rjmp	.+46     	; 0x13b8 <vfprintf+0x390>
    138a:	b7 01       	movw	r22, r14
    138c:	8e e2       	ldi	r24, 0x2E	; 46
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    1394:	1e 5f       	subi	r17, 0xFE	; 254
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	01 e0       	ldi	r16, 0x01	; 1
    139a:	08 0f       	add	r16, r24
    139c:	f3 01       	movw	r30, r6
    139e:	e8 0f       	add	r30, r24
    13a0:	f1 1d       	adc	r31, r1
    13a2:	80 81       	ld	r24, Z
    13a4:	b7 01       	movw	r22, r14
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    13ac:	80 2f       	mov	r24, r16
    13ae:	01 13       	cpse	r16, r17
    13b0:	f3 cf       	rjmp	.-26     	; 0x1398 <vfprintf+0x370>
    13b2:	e6 cf       	rjmp	.-52     	; 0x1380 <vfprintf+0x358>
    13b4:	85 e4       	ldi	r24, 0x45	; 69
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	b7 01       	movw	r22, r14
    13ba:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    13be:	d7 fc       	sbrc	r13, 7
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <vfprintf+0x3a6>
    13c2:	c1 14       	cp	r12, r1
    13c4:	d1 04       	cpc	r13, r1
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <vfprintf+0x3b0>
    13c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    13ca:	e4 ff       	sbrs	r30, 4
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <vfprintf+0x3b0>
    13ce:	d1 94       	neg	r13
    13d0:	c1 94       	neg	r12
    13d2:	d1 08       	sbc	r13, r1
    13d4:	8d e2       	ldi	r24, 0x2D	; 45
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <vfprintf+0x3b2>
    13d8:	8b e2       	ldi	r24, 0x2B	; 43
    13da:	b7 01       	movw	r22, r14
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    13e2:	80 e3       	ldi	r24, 0x30	; 48
    13e4:	2a e0       	ldi	r18, 0x0A	; 10
    13e6:	c2 16       	cp	r12, r18
    13e8:	d1 04       	cpc	r13, r1
    13ea:	2c f0       	brlt	.+10     	; 0x13f6 <vfprintf+0x3ce>
    13ec:	8f 5f       	subi	r24, 0xFF	; 255
    13ee:	fa e0       	ldi	r31, 0x0A	; 10
    13f0:	cf 1a       	sub	r12, r31
    13f2:	d1 08       	sbc	r13, r1
    13f4:	f7 cf       	rjmp	.-18     	; 0x13e4 <vfprintf+0x3bc>
    13f6:	b7 01       	movw	r22, r14
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    13fe:	b7 01       	movw	r22, r14
    1400:	c6 01       	movw	r24, r12
    1402:	c0 96       	adiw	r24, 0x30	; 48
    1404:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    1408:	54 c1       	rjmp	.+680    	; 0x16b2 <vfprintf+0x68a>
    140a:	83 36       	cpi	r24, 0x63	; 99
    140c:	31 f0       	breq	.+12     	; 0x141a <vfprintf+0x3f2>
    140e:	83 37       	cpi	r24, 0x73	; 115
    1410:	79 f0       	breq	.+30     	; 0x1430 <vfprintf+0x408>
    1412:	83 35       	cpi	r24, 0x53	; 83
    1414:	09 f0       	breq	.+2      	; 0x1418 <vfprintf+0x3f0>
    1416:	56 c0       	rjmp	.+172    	; 0x14c4 <vfprintf+0x49c>
    1418:	20 c0       	rjmp	.+64     	; 0x145a <vfprintf+0x432>
    141a:	56 01       	movw	r10, r12
    141c:	32 e0       	ldi	r19, 0x02	; 2
    141e:	a3 0e       	add	r10, r19
    1420:	b1 1c       	adc	r11, r1
    1422:	f6 01       	movw	r30, r12
    1424:	80 81       	ld	r24, Z
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	01 e0       	ldi	r16, 0x01	; 1
    142a:	10 e0       	ldi	r17, 0x00	; 0
    142c:	63 01       	movw	r12, r6
    142e:	12 c0       	rjmp	.+36     	; 0x1454 <vfprintf+0x42c>
    1430:	56 01       	movw	r10, r12
    1432:	f2 e0       	ldi	r31, 0x02	; 2
    1434:	af 0e       	add	r10, r31
    1436:	b1 1c       	adc	r11, r1
    1438:	f6 01       	movw	r30, r12
    143a:	c0 80       	ld	r12, Z
    143c:	d1 80       	ldd	r13, Z+1	; 0x01
    143e:	96 fe       	sbrs	r9, 6
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <vfprintf+0x420>
    1442:	61 2f       	mov	r22, r17
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <vfprintf+0x424>
    1448:	6f ef       	ldi	r22, 0xFF	; 255
    144a:	7f ef       	ldi	r23, 0xFF	; 255
    144c:	c6 01       	movw	r24, r12
    144e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <strnlen>
    1452:	8c 01       	movw	r16, r24
    1454:	f9 2d       	mov	r31, r9
    1456:	ff 77       	andi	r31, 0x7F	; 127
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <vfprintf+0x45a>
    145a:	56 01       	movw	r10, r12
    145c:	22 e0       	ldi	r18, 0x02	; 2
    145e:	a2 0e       	add	r10, r18
    1460:	b1 1c       	adc	r11, r1
    1462:	f6 01       	movw	r30, r12
    1464:	c0 80       	ld	r12, Z
    1466:	d1 80       	ldd	r13, Z+1	; 0x01
    1468:	96 fe       	sbrs	r9, 6
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <vfprintf+0x44a>
    146c:	61 2f       	mov	r22, r17
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x44e>
    1472:	6f ef       	ldi	r22, 0xFF	; 255
    1474:	7f ef       	ldi	r23, 0xFF	; 255
    1476:	c6 01       	movw	r24, r12
    1478:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strnlen_P>
    147c:	8c 01       	movw	r16, r24
    147e:	f9 2d       	mov	r31, r9
    1480:	f0 68       	ori	r31, 0x80	; 128
    1482:	9f 2e       	mov	r9, r31
    1484:	f3 fd       	sbrc	r31, 3
    1486:	1a c0       	rjmp	.+52     	; 0x14bc <vfprintf+0x494>
    1488:	85 2d       	mov	r24, r5
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	08 17       	cp	r16, r24
    148e:	19 07       	cpc	r17, r25
    1490:	a8 f4       	brcc	.+42     	; 0x14bc <vfprintf+0x494>
    1492:	b7 01       	movw	r22, r14
    1494:	80 e2       	ldi	r24, 0x20	; 32
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    149c:	5a 94       	dec	r5
    149e:	f4 cf       	rjmp	.-24     	; 0x1488 <vfprintf+0x460>
    14a0:	f6 01       	movw	r30, r12
    14a2:	97 fc       	sbrc	r9, 7
    14a4:	85 91       	lpm	r24, Z+
    14a6:	97 fe       	sbrs	r9, 7
    14a8:	81 91       	ld	r24, Z+
    14aa:	6f 01       	movw	r12, r30
    14ac:	b7 01       	movw	r22, r14
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    14b4:	51 10       	cpse	r5, r1
    14b6:	5a 94       	dec	r5
    14b8:	01 50       	subi	r16, 0x01	; 1
    14ba:	11 09       	sbc	r17, r1
    14bc:	01 15       	cp	r16, r1
    14be:	11 05       	cpc	r17, r1
    14c0:	79 f7       	brne	.-34     	; 0x14a0 <vfprintf+0x478>
    14c2:	f7 c0       	rjmp	.+494    	; 0x16b2 <vfprintf+0x68a>
    14c4:	84 36       	cpi	r24, 0x64	; 100
    14c6:	11 f0       	breq	.+4      	; 0x14cc <vfprintf+0x4a4>
    14c8:	89 36       	cpi	r24, 0x69	; 105
    14ca:	61 f5       	brne	.+88     	; 0x1524 <vfprintf+0x4fc>
    14cc:	56 01       	movw	r10, r12
    14ce:	97 fe       	sbrs	r9, 7
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <vfprintf+0x4bc>
    14d2:	24 e0       	ldi	r18, 0x04	; 4
    14d4:	a2 0e       	add	r10, r18
    14d6:	b1 1c       	adc	r11, r1
    14d8:	f6 01       	movw	r30, r12
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	0a c0       	rjmp	.+20     	; 0x14f8 <vfprintf+0x4d0>
    14e4:	f2 e0       	ldi	r31, 0x02	; 2
    14e6:	af 0e       	add	r10, r31
    14e8:	b1 1c       	adc	r11, r1
    14ea:	f6 01       	movw	r30, r12
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	07 2e       	mov	r0, r23
    14f2:	00 0c       	add	r0, r0
    14f4:	88 0b       	sbc	r24, r24
    14f6:	99 0b       	sbc	r25, r25
    14f8:	f9 2d       	mov	r31, r9
    14fa:	ff 76       	andi	r31, 0x6F	; 111
    14fc:	9f 2e       	mov	r9, r31
    14fe:	97 ff       	sbrs	r25, 7
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <vfprintf+0x4ec>
    1502:	90 95       	com	r25
    1504:	80 95       	com	r24
    1506:	70 95       	com	r23
    1508:	61 95       	neg	r22
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	8f 4f       	sbci	r24, 0xFF	; 255
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	f0 68       	ori	r31, 0x80	; 128
    1512:	9f 2e       	mov	r9, r31
    1514:	2a e0       	ldi	r18, 0x0A	; 10
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	a3 01       	movw	r20, r6
    151a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__ultoa_invert>
    151e:	c8 2e       	mov	r12, r24
    1520:	c6 18       	sub	r12, r6
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <vfprintf+0x57a>
    1524:	09 2d       	mov	r16, r9
    1526:	85 37       	cpi	r24, 0x75	; 117
    1528:	21 f4       	brne	.+8      	; 0x1532 <vfprintf+0x50a>
    152a:	0f 7e       	andi	r16, 0xEF	; 239
    152c:	2a e0       	ldi	r18, 0x0A	; 10
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	1d c0       	rjmp	.+58     	; 0x156c <vfprintf+0x544>
    1532:	09 7f       	andi	r16, 0xF9	; 249
    1534:	8f 36       	cpi	r24, 0x6F	; 111
    1536:	91 f0       	breq	.+36     	; 0x155c <vfprintf+0x534>
    1538:	18 f4       	brcc	.+6      	; 0x1540 <vfprintf+0x518>
    153a:	88 35       	cpi	r24, 0x58	; 88
    153c:	59 f0       	breq	.+22     	; 0x1554 <vfprintf+0x52c>
    153e:	c3 c0       	rjmp	.+390    	; 0x16c6 <vfprintf+0x69e>
    1540:	80 37       	cpi	r24, 0x70	; 112
    1542:	19 f0       	breq	.+6      	; 0x154a <vfprintf+0x522>
    1544:	88 37       	cpi	r24, 0x78	; 120
    1546:	11 f0       	breq	.+4      	; 0x154c <vfprintf+0x524>
    1548:	be c0       	rjmp	.+380    	; 0x16c6 <vfprintf+0x69e>
    154a:	00 61       	ori	r16, 0x10	; 16
    154c:	04 ff       	sbrs	r16, 4
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <vfprintf+0x53a>
    1550:	04 60       	ori	r16, 0x04	; 4
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <vfprintf+0x53a>
    1554:	94 fe       	sbrs	r9, 4
    1556:	08 c0       	rjmp	.+16     	; 0x1568 <vfprintf+0x540>
    1558:	06 60       	ori	r16, 0x06	; 6
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfprintf+0x540>
    155c:	28 e0       	ldi	r18, 0x08	; 8
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	05 c0       	rjmp	.+10     	; 0x156c <vfprintf+0x544>
    1562:	20 e1       	ldi	r18, 0x10	; 16
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <vfprintf+0x544>
    1568:	20 e1       	ldi	r18, 0x10	; 16
    156a:	32 e0       	ldi	r19, 0x02	; 2
    156c:	56 01       	movw	r10, r12
    156e:	07 ff       	sbrs	r16, 7
    1570:	09 c0       	rjmp	.+18     	; 0x1584 <vfprintf+0x55c>
    1572:	84 e0       	ldi	r24, 0x04	; 4
    1574:	a8 0e       	add	r10, r24
    1576:	b1 1c       	adc	r11, r1
    1578:	f6 01       	movw	r30, r12
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	08 c0       	rjmp	.+16     	; 0x1594 <vfprintf+0x56c>
    1584:	f2 e0       	ldi	r31, 0x02	; 2
    1586:	af 0e       	add	r10, r31
    1588:	b1 1c       	adc	r11, r1
    158a:	f6 01       	movw	r30, r12
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a3 01       	movw	r20, r6
    1596:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__ultoa_invert>
    159a:	c8 2e       	mov	r12, r24
    159c:	c6 18       	sub	r12, r6
    159e:	0f 77       	andi	r16, 0x7F	; 127
    15a0:	90 2e       	mov	r9, r16
    15a2:	96 fe       	sbrs	r9, 6
    15a4:	0b c0       	rjmp	.+22     	; 0x15bc <vfprintf+0x594>
    15a6:	09 2d       	mov	r16, r9
    15a8:	0e 7f       	andi	r16, 0xFE	; 254
    15aa:	c1 16       	cp	r12, r17
    15ac:	50 f4       	brcc	.+20     	; 0x15c2 <vfprintf+0x59a>
    15ae:	94 fe       	sbrs	r9, 4
    15b0:	0a c0       	rjmp	.+20     	; 0x15c6 <vfprintf+0x59e>
    15b2:	92 fc       	sbrc	r9, 2
    15b4:	08 c0       	rjmp	.+16     	; 0x15c6 <vfprintf+0x59e>
    15b6:	09 2d       	mov	r16, r9
    15b8:	0e 7e       	andi	r16, 0xEE	; 238
    15ba:	05 c0       	rjmp	.+10     	; 0x15c6 <vfprintf+0x59e>
    15bc:	dc 2c       	mov	r13, r12
    15be:	09 2d       	mov	r16, r9
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <vfprintf+0x5a0>
    15c2:	dc 2c       	mov	r13, r12
    15c4:	01 c0       	rjmp	.+2      	; 0x15c8 <vfprintf+0x5a0>
    15c6:	d1 2e       	mov	r13, r17
    15c8:	04 ff       	sbrs	r16, 4
    15ca:	0d c0       	rjmp	.+26     	; 0x15e6 <vfprintf+0x5be>
    15cc:	fe 01       	movw	r30, r28
    15ce:	ec 0d       	add	r30, r12
    15d0:	f1 1d       	adc	r31, r1
    15d2:	80 81       	ld	r24, Z
    15d4:	80 33       	cpi	r24, 0x30	; 48
    15d6:	11 f4       	brne	.+4      	; 0x15dc <vfprintf+0x5b4>
    15d8:	09 7e       	andi	r16, 0xE9	; 233
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <vfprintf+0x5c6>
    15dc:	02 ff       	sbrs	r16, 2
    15de:	06 c0       	rjmp	.+12     	; 0x15ec <vfprintf+0x5c4>
    15e0:	d3 94       	inc	r13
    15e2:	d3 94       	inc	r13
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <vfprintf+0x5c6>
    15e6:	80 2f       	mov	r24, r16
    15e8:	86 78       	andi	r24, 0x86	; 134
    15ea:	09 f0       	breq	.+2      	; 0x15ee <vfprintf+0x5c6>
    15ec:	d3 94       	inc	r13
    15ee:	03 fd       	sbrc	r16, 3
    15f0:	11 c0       	rjmp	.+34     	; 0x1614 <vfprintf+0x5ec>
    15f2:	00 ff       	sbrs	r16, 0
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <vfprintf+0x5da>
    15f6:	1c 2d       	mov	r17, r12
    15f8:	d5 14       	cp	r13, r5
    15fa:	80 f4       	brcc	.+32     	; 0x161c <vfprintf+0x5f4>
    15fc:	15 0d       	add	r17, r5
    15fe:	1d 19       	sub	r17, r13
    1600:	0d c0       	rjmp	.+26     	; 0x161c <vfprintf+0x5f4>
    1602:	d5 14       	cp	r13, r5
    1604:	58 f4       	brcc	.+22     	; 0x161c <vfprintf+0x5f4>
    1606:	b7 01       	movw	r22, r14
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    1610:	d3 94       	inc	r13
    1612:	f7 cf       	rjmp	.-18     	; 0x1602 <vfprintf+0x5da>
    1614:	d5 14       	cp	r13, r5
    1616:	10 f4       	brcc	.+4      	; 0x161c <vfprintf+0x5f4>
    1618:	5d 18       	sub	r5, r13
    161a:	01 c0       	rjmp	.+2      	; 0x161e <vfprintf+0x5f6>
    161c:	51 2c       	mov	r5, r1
    161e:	04 ff       	sbrs	r16, 4
    1620:	10 c0       	rjmp	.+32     	; 0x1642 <vfprintf+0x61a>
    1622:	b7 01       	movw	r22, r14
    1624:	80 e3       	ldi	r24, 0x30	; 48
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    162c:	02 ff       	sbrs	r16, 2
    162e:	17 c0       	rjmp	.+46     	; 0x165e <vfprintf+0x636>
    1630:	01 fd       	sbrc	r16, 1
    1632:	03 c0       	rjmp	.+6      	; 0x163a <vfprintf+0x612>
    1634:	88 e7       	ldi	r24, 0x78	; 120
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x616>
    163a:	88 e5       	ldi	r24, 0x58	; 88
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	b7 01       	movw	r22, r14
    1640:	0c c0       	rjmp	.+24     	; 0x165a <vfprintf+0x632>
    1642:	80 2f       	mov	r24, r16
    1644:	86 78       	andi	r24, 0x86	; 134
    1646:	59 f0       	breq	.+22     	; 0x165e <vfprintf+0x636>
    1648:	01 ff       	sbrs	r16, 1
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <vfprintf+0x628>
    164c:	8b e2       	ldi	r24, 0x2B	; 43
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <vfprintf+0x62a>
    1650:	80 e2       	ldi	r24, 0x20	; 32
    1652:	07 fd       	sbrc	r16, 7
    1654:	8d e2       	ldi	r24, 0x2D	; 45
    1656:	b7 01       	movw	r22, r14
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    165e:	c1 16       	cp	r12, r17
    1660:	38 f4       	brcc	.+14     	; 0x1670 <vfprintf+0x648>
    1662:	b7 01       	movw	r22, r14
    1664:	80 e3       	ldi	r24, 0x30	; 48
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    166c:	11 50       	subi	r17, 0x01	; 1
    166e:	f7 cf       	rjmp	.-18     	; 0x165e <vfprintf+0x636>
    1670:	ca 94       	dec	r12
    1672:	f3 01       	movw	r30, r6
    1674:	ec 0d       	add	r30, r12
    1676:	f1 1d       	adc	r31, r1
    1678:	80 81       	ld	r24, Z
    167a:	b7 01       	movw	r22, r14
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    1682:	c1 10       	cpse	r12, r1
    1684:	f5 cf       	rjmp	.-22     	; 0x1670 <vfprintf+0x648>
    1686:	15 c0       	rjmp	.+42     	; 0x16b2 <vfprintf+0x68a>
    1688:	f4 e0       	ldi	r31, 0x04	; 4
    168a:	f5 15       	cp	r31, r5
    168c:	60 f5       	brcc	.+88     	; 0x16e6 <vfprintf+0x6be>
    168e:	84 e0       	ldi	r24, 0x04	; 4
    1690:	58 1a       	sub	r5, r24
    1692:	93 fe       	sbrs	r9, 3
    1694:	1f c0       	rjmp	.+62     	; 0x16d4 <vfprintf+0x6ac>
    1696:	01 11       	cpse	r16, r1
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <vfprintf+0x6c0>
    169a:	2c 85       	ldd	r18, Y+12	; 0x0c
    169c:	23 ff       	sbrs	r18, 3
    169e:	2a c0       	rjmp	.+84     	; 0x16f4 <vfprintf+0x6cc>
    16a0:	08 e6       	ldi	r16, 0x68	; 104
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	39 2d       	mov	r19, r9
    16a6:	30 71       	andi	r19, 0x10	; 16
    16a8:	93 2e       	mov	r9, r19
    16aa:	f8 01       	movw	r30, r16
    16ac:	84 91       	lpm	r24, Z
    16ae:	81 11       	cpse	r24, r1
    16b0:	24 c0       	rjmp	.+72     	; 0x16fa <vfprintf+0x6d2>
    16b2:	55 20       	and	r5, r5
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <vfprintf+0x690>
    16b6:	e4 cc       	rjmp	.-1592   	; 0x1080 <vfprintf+0x58>
    16b8:	b7 01       	movw	r22, r14
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    16c2:	5a 94       	dec	r5
    16c4:	f6 cf       	rjmp	.-20     	; 0x16b2 <vfprintf+0x68a>
    16c6:	f7 01       	movw	r30, r14
    16c8:	86 81       	ldd	r24, Z+6	; 0x06
    16ca:	97 81       	ldd	r25, Z+7	; 0x07
    16cc:	26 c0       	rjmp	.+76     	; 0x171a <vfprintf+0x6f2>
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	9f ef       	ldi	r25, 0xFF	; 255
    16d2:	23 c0       	rjmp	.+70     	; 0x171a <vfprintf+0x6f2>
    16d4:	b7 01       	movw	r22, r14
    16d6:	80 e2       	ldi	r24, 0x20	; 32
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    16de:	5a 94       	dec	r5
    16e0:	51 10       	cpse	r5, r1
    16e2:	f8 cf       	rjmp	.-16     	; 0x16d4 <vfprintf+0x6ac>
    16e4:	d8 cf       	rjmp	.-80     	; 0x1696 <vfprintf+0x66e>
    16e6:	51 2c       	mov	r5, r1
    16e8:	b7 01       	movw	r22, r14
    16ea:	80 2f       	mov	r24, r16
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    16f2:	d3 cf       	rjmp	.-90     	; 0x169a <vfprintf+0x672>
    16f4:	0c e6       	ldi	r16, 0x6C	; 108
    16f6:	10 e0       	ldi	r17, 0x00	; 0
    16f8:	d5 cf       	rjmp	.-86     	; 0x16a4 <vfprintf+0x67c>
    16fa:	91 10       	cpse	r9, r1
    16fc:	80 52       	subi	r24, 0x20	; 32
    16fe:	b7 01       	movw	r22, r14
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <fputc>
    1706:	0f 5f       	subi	r16, 0xFF	; 255
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	cf cf       	rjmp	.-98     	; 0x16aa <vfprintf+0x682>
    170c:	23 e0       	ldi	r18, 0x03	; 3
    170e:	25 15       	cp	r18, r5
    1710:	10 f4       	brcc	.+4      	; 0x1716 <vfprintf+0x6ee>
    1712:	83 e0       	ldi	r24, 0x03	; 3
    1714:	bd cf       	rjmp	.-134    	; 0x1690 <vfprintf+0x668>
    1716:	51 2c       	mov	r5, r1
    1718:	c0 cf       	rjmp	.-128    	; 0x169a <vfprintf+0x672>
    171a:	60 96       	adiw	r28, 0x10	; 16
    171c:	e2 e1       	ldi	r30, 0x12	; 18
    171e:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__epilogue_restores__>

00001722 <__prologue_saves__>:
    1722:	2f 92       	push	r2
    1724:	3f 92       	push	r3
    1726:	4f 92       	push	r4
    1728:	5f 92       	push	r5
    172a:	6f 92       	push	r6
    172c:	7f 92       	push	r7
    172e:	8f 92       	push	r8
    1730:	9f 92       	push	r9
    1732:	af 92       	push	r10
    1734:	bf 92       	push	r11
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	ca 1b       	sub	r28, r26
    174c:	db 0b       	sbc	r29, r27
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	09 94       	ijmp

0000175a <__epilogue_restores__>:
    175a:	2a 88       	ldd	r2, Y+18	; 0x12
    175c:	39 88       	ldd	r3, Y+17	; 0x11
    175e:	48 88       	ldd	r4, Y+16	; 0x10
    1760:	5f 84       	ldd	r5, Y+15	; 0x0f
    1762:	6e 84       	ldd	r6, Y+14	; 0x0e
    1764:	7d 84       	ldd	r7, Y+13	; 0x0d
    1766:	8c 84       	ldd	r8, Y+12	; 0x0c
    1768:	9b 84       	ldd	r9, Y+11	; 0x0b
    176a:	aa 84       	ldd	r10, Y+10	; 0x0a
    176c:	b9 84       	ldd	r11, Y+9	; 0x09
    176e:	c8 84       	ldd	r12, Y+8	; 0x08
    1770:	df 80       	ldd	r13, Y+7	; 0x07
    1772:	ee 80       	ldd	r14, Y+6	; 0x06
    1774:	fd 80       	ldd	r15, Y+5	; 0x05
    1776:	0c 81       	ldd	r16, Y+4	; 0x04
    1778:	1b 81       	ldd	r17, Y+3	; 0x03
    177a:	aa 81       	ldd	r26, Y+2	; 0x02
    177c:	b9 81       	ldd	r27, Y+1	; 0x01
    177e:	ce 0f       	add	r28, r30
    1780:	d1 1d       	adc	r29, r1
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	ed 01       	movw	r28, r26
    178e:	08 95       	ret

00001790 <__ftoa_engine>:
    1790:	28 30       	cpi	r18, 0x08	; 8
    1792:	08 f0       	brcs	.+2      	; 0x1796 <__ftoa_engine+0x6>
    1794:	27 e0       	ldi	r18, 0x07	; 7
    1796:	33 27       	eor	r19, r19
    1798:	da 01       	movw	r26, r20
    179a:	99 0f       	add	r25, r25
    179c:	31 1d       	adc	r19, r1
    179e:	87 fd       	sbrc	r24, 7
    17a0:	91 60       	ori	r25, 0x01	; 1
    17a2:	00 96       	adiw	r24, 0x00	; 0
    17a4:	61 05       	cpc	r22, r1
    17a6:	71 05       	cpc	r23, r1
    17a8:	39 f4       	brne	.+14     	; 0x17b8 <__ftoa_engine+0x28>
    17aa:	32 60       	ori	r19, 0x02	; 2
    17ac:	2e 5f       	subi	r18, 0xFE	; 254
    17ae:	3d 93       	st	X+, r19
    17b0:	30 e3       	ldi	r19, 0x30	; 48
    17b2:	2a 95       	dec	r18
    17b4:	e1 f7       	brne	.-8      	; 0x17ae <__ftoa_engine+0x1e>
    17b6:	08 95       	ret
    17b8:	9f 3f       	cpi	r25, 0xFF	; 255
    17ba:	30 f0       	brcs	.+12     	; 0x17c8 <__ftoa_engine+0x38>
    17bc:	80 38       	cpi	r24, 0x80	; 128
    17be:	71 05       	cpc	r23, r1
    17c0:	61 05       	cpc	r22, r1
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <__ftoa_engine+0x36>
    17c4:	3c 5f       	subi	r19, 0xFC	; 252
    17c6:	3c 5f       	subi	r19, 0xFC	; 252
    17c8:	3d 93       	st	X+, r19
    17ca:	91 30       	cpi	r25, 0x01	; 1
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <__ftoa_engine+0x40>
    17ce:	80 68       	ori	r24, 0x80	; 128
    17d0:	91 1d       	adc	r25, r1
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	1f 93       	push	r17
    17d8:	0f 93       	push	r16
    17da:	ff 92       	push	r15
    17dc:	ef 92       	push	r14
    17de:	19 2f       	mov	r17, r25
    17e0:	98 7f       	andi	r25, 0xF8	; 248
    17e2:	96 95       	lsr	r25
    17e4:	e9 2f       	mov	r30, r25
    17e6:	96 95       	lsr	r25
    17e8:	96 95       	lsr	r25
    17ea:	e9 0f       	add	r30, r25
    17ec:	ff 27       	eor	r31, r31
    17ee:	e6 53       	subi	r30, 0x36	; 54
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	99 27       	eor	r25, r25
    17f4:	33 27       	eor	r19, r19
    17f6:	ee 24       	eor	r14, r14
    17f8:	ff 24       	eor	r15, r15
    17fa:	a7 01       	movw	r20, r14
    17fc:	e7 01       	movw	r28, r14
    17fe:	05 90       	lpm	r0, Z+
    1800:	08 94       	sec
    1802:	07 94       	ror	r0
    1804:	28 f4       	brcc	.+10     	; 0x1810 <__ftoa_engine+0x80>
    1806:	36 0f       	add	r19, r22
    1808:	e7 1e       	adc	r14, r23
    180a:	f8 1e       	adc	r15, r24
    180c:	49 1f       	adc	r20, r25
    180e:	51 1d       	adc	r21, r1
    1810:	66 0f       	add	r22, r22
    1812:	77 1f       	adc	r23, r23
    1814:	88 1f       	adc	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	06 94       	lsr	r0
    181a:	a1 f7       	brne	.-24     	; 0x1804 <__ftoa_engine+0x74>
    181c:	05 90       	lpm	r0, Z+
    181e:	07 94       	ror	r0
    1820:	28 f4       	brcc	.+10     	; 0x182c <__ftoa_engine+0x9c>
    1822:	e7 0e       	add	r14, r23
    1824:	f8 1e       	adc	r15, r24
    1826:	49 1f       	adc	r20, r25
    1828:	56 1f       	adc	r21, r22
    182a:	c1 1d       	adc	r28, r1
    182c:	77 0f       	add	r23, r23
    182e:	88 1f       	adc	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	66 1f       	adc	r22, r22
    1834:	06 94       	lsr	r0
    1836:	a1 f7       	brne	.-24     	; 0x1820 <__ftoa_engine+0x90>
    1838:	05 90       	lpm	r0, Z+
    183a:	07 94       	ror	r0
    183c:	28 f4       	brcc	.+10     	; 0x1848 <__ftoa_engine+0xb8>
    183e:	f8 0e       	add	r15, r24
    1840:	49 1f       	adc	r20, r25
    1842:	56 1f       	adc	r21, r22
    1844:	c7 1f       	adc	r28, r23
    1846:	d1 1d       	adc	r29, r1
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	66 1f       	adc	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	06 94       	lsr	r0
    1852:	a1 f7       	brne	.-24     	; 0x183c <__ftoa_engine+0xac>
    1854:	05 90       	lpm	r0, Z+
    1856:	07 94       	ror	r0
    1858:	20 f4       	brcc	.+8      	; 0x1862 <__ftoa_engine+0xd2>
    185a:	49 0f       	add	r20, r25
    185c:	56 1f       	adc	r21, r22
    185e:	c7 1f       	adc	r28, r23
    1860:	d8 1f       	adc	r29, r24
    1862:	99 0f       	add	r25, r25
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	06 94       	lsr	r0
    186c:	a9 f7       	brne	.-22     	; 0x1858 <__ftoa_engine+0xc8>
    186e:	84 91       	lpm	r24, Z
    1870:	10 95       	com	r17
    1872:	17 70       	andi	r17, 0x07	; 7
    1874:	41 f0       	breq	.+16     	; 0x1886 <__ftoa_engine+0xf6>
    1876:	d6 95       	lsr	r29
    1878:	c7 95       	ror	r28
    187a:	57 95       	ror	r21
    187c:	47 95       	ror	r20
    187e:	f7 94       	ror	r15
    1880:	e7 94       	ror	r14
    1882:	1a 95       	dec	r17
    1884:	c1 f7       	brne	.-16     	; 0x1876 <__ftoa_engine+0xe6>
    1886:	e0 e7       	ldi	r30, 0x70	; 112
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	68 94       	set
    188c:	15 90       	lpm	r1, Z+
    188e:	15 91       	lpm	r17, Z+
    1890:	35 91       	lpm	r19, Z+
    1892:	65 91       	lpm	r22, Z+
    1894:	95 91       	lpm	r25, Z+
    1896:	05 90       	lpm	r0, Z+
    1898:	7f e2       	ldi	r23, 0x2F	; 47
    189a:	73 95       	inc	r23
    189c:	e1 18       	sub	r14, r1
    189e:	f1 0a       	sbc	r15, r17
    18a0:	43 0b       	sbc	r20, r19
    18a2:	56 0b       	sbc	r21, r22
    18a4:	c9 0b       	sbc	r28, r25
    18a6:	d0 09       	sbc	r29, r0
    18a8:	c0 f7       	brcc	.-16     	; 0x189a <__ftoa_engine+0x10a>
    18aa:	e1 0c       	add	r14, r1
    18ac:	f1 1e       	adc	r15, r17
    18ae:	43 1f       	adc	r20, r19
    18b0:	56 1f       	adc	r21, r22
    18b2:	c9 1f       	adc	r28, r25
    18b4:	d0 1d       	adc	r29, r0
    18b6:	7e f4       	brtc	.+30     	; 0x18d6 <__ftoa_engine+0x146>
    18b8:	70 33       	cpi	r23, 0x30	; 48
    18ba:	11 f4       	brne	.+4      	; 0x18c0 <__ftoa_engine+0x130>
    18bc:	8a 95       	dec	r24
    18be:	e6 cf       	rjmp	.-52     	; 0x188c <__ftoa_engine+0xfc>
    18c0:	e8 94       	clt
    18c2:	01 50       	subi	r16, 0x01	; 1
    18c4:	30 f0       	brcs	.+12     	; 0x18d2 <__ftoa_engine+0x142>
    18c6:	08 0f       	add	r16, r24
    18c8:	0a f4       	brpl	.+2      	; 0x18cc <__ftoa_engine+0x13c>
    18ca:	00 27       	eor	r16, r16
    18cc:	02 17       	cp	r16, r18
    18ce:	08 f4       	brcc	.+2      	; 0x18d2 <__ftoa_engine+0x142>
    18d0:	20 2f       	mov	r18, r16
    18d2:	23 95       	inc	r18
    18d4:	02 2f       	mov	r16, r18
    18d6:	7a 33       	cpi	r23, 0x3A	; 58
    18d8:	28 f0       	brcs	.+10     	; 0x18e4 <__ftoa_engine+0x154>
    18da:	79 e3       	ldi	r23, 0x39	; 57
    18dc:	7d 93       	st	X+, r23
    18de:	2a 95       	dec	r18
    18e0:	e9 f7       	brne	.-6      	; 0x18dc <__ftoa_engine+0x14c>
    18e2:	10 c0       	rjmp	.+32     	; 0x1904 <__ftoa_engine+0x174>
    18e4:	7d 93       	st	X+, r23
    18e6:	2a 95       	dec	r18
    18e8:	89 f6       	brne	.-94     	; 0x188c <__ftoa_engine+0xfc>
    18ea:	06 94       	lsr	r0
    18ec:	97 95       	ror	r25
    18ee:	67 95       	ror	r22
    18f0:	37 95       	ror	r19
    18f2:	17 95       	ror	r17
    18f4:	17 94       	ror	r1
    18f6:	e1 18       	sub	r14, r1
    18f8:	f1 0a       	sbc	r15, r17
    18fa:	43 0b       	sbc	r20, r19
    18fc:	56 0b       	sbc	r21, r22
    18fe:	c9 0b       	sbc	r28, r25
    1900:	d0 09       	sbc	r29, r0
    1902:	98 f0       	brcs	.+38     	; 0x192a <__ftoa_engine+0x19a>
    1904:	23 95       	inc	r18
    1906:	7e 91       	ld	r23, -X
    1908:	73 95       	inc	r23
    190a:	7a 33       	cpi	r23, 0x3A	; 58
    190c:	08 f0       	brcs	.+2      	; 0x1910 <__ftoa_engine+0x180>
    190e:	70 e3       	ldi	r23, 0x30	; 48
    1910:	7c 93       	st	X, r23
    1912:	20 13       	cpse	r18, r16
    1914:	b8 f7       	brcc	.-18     	; 0x1904 <__ftoa_engine+0x174>
    1916:	7e 91       	ld	r23, -X
    1918:	70 61       	ori	r23, 0x10	; 16
    191a:	7d 93       	st	X+, r23
    191c:	30 f0       	brcs	.+12     	; 0x192a <__ftoa_engine+0x19a>
    191e:	83 95       	inc	r24
    1920:	71 e3       	ldi	r23, 0x31	; 49
    1922:	7d 93       	st	X+, r23
    1924:	70 e3       	ldi	r23, 0x30	; 48
    1926:	2a 95       	dec	r18
    1928:	e1 f7       	brne	.-8      	; 0x1922 <__ftoa_engine+0x192>
    192a:	11 24       	eor	r1, r1
    192c:	ef 90       	pop	r14
    192e:	ff 90       	pop	r15
    1930:	0f 91       	pop	r16
    1932:	1f 91       	pop	r17
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	99 27       	eor	r25, r25
    193a:	87 fd       	sbrc	r24, 7
    193c:	90 95       	com	r25
    193e:	08 95       	ret

00001940 <strnlen_P>:
    1940:	fc 01       	movw	r30, r24
    1942:	05 90       	lpm	r0, Z+
    1944:	61 50       	subi	r22, 0x01	; 1
    1946:	70 40       	sbci	r23, 0x00	; 0
    1948:	01 10       	cpse	r0, r1
    194a:	d8 f7       	brcc	.-10     	; 0x1942 <strnlen_P+0x2>
    194c:	80 95       	com	r24
    194e:	90 95       	com	r25
    1950:	8e 0f       	add	r24, r30
    1952:	9f 1f       	adc	r25, r31
    1954:	08 95       	ret

00001956 <strnlen>:
    1956:	fc 01       	movw	r30, r24
    1958:	61 50       	subi	r22, 0x01	; 1
    195a:	70 40       	sbci	r23, 0x00	; 0
    195c:	01 90       	ld	r0, Z+
    195e:	01 10       	cpse	r0, r1
    1960:	d8 f7       	brcc	.-10     	; 0x1958 <strnlen+0x2>
    1962:	80 95       	com	r24
    1964:	90 95       	com	r25
    1966:	8e 0f       	add	r24, r30
    1968:	9f 1f       	adc	r25, r31
    196a:	08 95       	ret

0000196c <itoa>:
    196c:	45 32       	cpi	r20, 0x25	; 37
    196e:	51 05       	cpc	r21, r1
    1970:	20 f4       	brcc	.+8      	; 0x197a <itoa+0xe>
    1972:	42 30       	cpi	r20, 0x02	; 2
    1974:	10 f0       	brcs	.+4      	; 0x197a <itoa+0xe>
    1976:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__itoa_ncheck>
    197a:	fb 01       	movw	r30, r22
    197c:	10 82       	st	Z, r1
    197e:	cb 01       	movw	r24, r22
    1980:	08 95       	ret

00001982 <__itoa_ncheck>:
    1982:	bb 27       	eor	r27, r27
    1984:	4a 30       	cpi	r20, 0x0A	; 10
    1986:	31 f4       	brne	.+12     	; 0x1994 <__itoa_ncheck+0x12>
    1988:	99 23       	and	r25, r25
    198a:	22 f4       	brpl	.+8      	; 0x1994 <__itoa_ncheck+0x12>
    198c:	bd e2       	ldi	r27, 0x2D	; 45
    198e:	90 95       	com	r25
    1990:	81 95       	neg	r24
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__utoa_common>

00001998 <__utoa_ncheck>:
    1998:	bb 27       	eor	r27, r27

0000199a <__utoa_common>:
    199a:	fb 01       	movw	r30, r22
    199c:	55 27       	eor	r21, r21
    199e:	aa 27       	eor	r26, r26
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	aa 1f       	adc	r26, r26
    19a6:	a4 17       	cp	r26, r20
    19a8:	10 f0       	brcs	.+4      	; 0x19ae <__utoa_common+0x14>
    19aa:	a4 1b       	sub	r26, r20
    19ac:	83 95       	inc	r24
    19ae:	50 51       	subi	r21, 0x10	; 16
    19b0:	b9 f7       	brne	.-18     	; 0x19a0 <__utoa_common+0x6>
    19b2:	a0 5d       	subi	r26, 0xD0	; 208
    19b4:	aa 33       	cpi	r26, 0x3A	; 58
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <__utoa_common+0x20>
    19b8:	a9 5d       	subi	r26, 0xD9	; 217
    19ba:	a1 93       	st	Z+, r26
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	79 f7       	brne	.-34     	; 0x199e <__utoa_common+0x4>
    19c0:	b1 11       	cpse	r27, r1
    19c2:	b1 93       	st	Z+, r27
    19c4:	11 92       	st	Z+, r1
    19c6:	cb 01       	movw	r24, r22
    19c8:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <strrev>

000019cc <fputc>:
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	fb 01       	movw	r30, r22
    19d6:	23 81       	ldd	r18, Z+3	; 0x03
    19d8:	21 fd       	sbrc	r18, 1
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <fputc+0x16>
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	9f ef       	ldi	r25, 0xFF	; 255
    19e0:	2c c0       	rjmp	.+88     	; 0x1a3a <fputc+0x6e>
    19e2:	22 ff       	sbrs	r18, 2
    19e4:	16 c0       	rjmp	.+44     	; 0x1a12 <fputc+0x46>
    19e6:	46 81       	ldd	r20, Z+6	; 0x06
    19e8:	57 81       	ldd	r21, Z+7	; 0x07
    19ea:	24 81       	ldd	r18, Z+4	; 0x04
    19ec:	35 81       	ldd	r19, Z+5	; 0x05
    19ee:	42 17       	cp	r20, r18
    19f0:	53 07       	cpc	r21, r19
    19f2:	44 f4       	brge	.+16     	; 0x1a04 <fputc+0x38>
    19f4:	a0 81       	ld	r26, Z
    19f6:	b1 81       	ldd	r27, Z+1	; 0x01
    19f8:	9d 01       	movw	r18, r26
    19fa:	2f 5f       	subi	r18, 0xFF	; 255
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	31 83       	std	Z+1, r19	; 0x01
    1a00:	20 83       	st	Z, r18
    1a02:	8c 93       	st	X, r24
    1a04:	26 81       	ldd	r18, Z+6	; 0x06
    1a06:	37 81       	ldd	r19, Z+7	; 0x07
    1a08:	2f 5f       	subi	r18, 0xFF	; 255
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	37 83       	std	Z+7, r19	; 0x07
    1a0e:	26 83       	std	Z+6, r18	; 0x06
    1a10:	14 c0       	rjmp	.+40     	; 0x1a3a <fputc+0x6e>
    1a12:	8b 01       	movw	r16, r22
    1a14:	ec 01       	movw	r28, r24
    1a16:	fb 01       	movw	r30, r22
    1a18:	00 84       	ldd	r0, Z+8	; 0x08
    1a1a:	f1 85       	ldd	r31, Z+9	; 0x09
    1a1c:	e0 2d       	mov	r30, r0
    1a1e:	09 95       	icall
    1a20:	89 2b       	or	r24, r25
    1a22:	e1 f6       	brne	.-72     	; 0x19dc <fputc+0x10>
    1a24:	d8 01       	movw	r26, r16
    1a26:	16 96       	adiw	r26, 0x06	; 6
    1a28:	8d 91       	ld	r24, X+
    1a2a:	9c 91       	ld	r25, X
    1a2c:	17 97       	sbiw	r26, 0x07	; 7
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	17 96       	adiw	r26, 0x07	; 7
    1a32:	9c 93       	st	X, r25
    1a34:	8e 93       	st	-X, r24
    1a36:	16 97       	sbiw	r26, 0x06	; 6
    1a38:	ce 01       	movw	r24, r28
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	08 95       	ret

00001a44 <sprintf>:
    1a44:	ae e0       	ldi	r26, 0x0E	; 14
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e8 e2       	ldi	r30, 0x28	; 40
    1a4a:	fd e0       	ldi	r31, 0x0D	; 13
    1a4c:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__prologue_saves__+0x1c>
    1a50:	0d 89       	ldd	r16, Y+21	; 0x15
    1a52:	1e 89       	ldd	r17, Y+22	; 0x16
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	8c 83       	std	Y+4, r24	; 0x04
    1a58:	1a 83       	std	Y+2, r17	; 0x02
    1a5a:	09 83       	std	Y+1, r16	; 0x01
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	9f e7       	ldi	r25, 0x7F	; 127
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	ae 01       	movw	r20, r28
    1a66:	47 5e       	subi	r20, 0xE7	; 231
    1a68:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6a:	6f 89       	ldd	r22, Y+23	; 0x17
    1a6c:	78 8d       	ldd	r23, Y+24	; 0x18
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	0e 94 14 08 	call	0x1028	; 0x1028 <vfprintf>
    1a76:	ef 81       	ldd	r30, Y+7	; 0x07
    1a78:	f8 85       	ldd	r31, Y+8	; 0x08
    1a7a:	e0 0f       	add	r30, r16
    1a7c:	f1 1f       	adc	r31, r17
    1a7e:	10 82       	st	Z, r1
    1a80:	2e 96       	adiw	r28, 0x0e	; 14
    1a82:	e4 e0       	ldi	r30, 0x04	; 4
    1a84:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__epilogue_restores__+0x1c>

00001a88 <__ultoa_invert>:
    1a88:	fa 01       	movw	r30, r20
    1a8a:	aa 27       	eor	r26, r26
    1a8c:	28 30       	cpi	r18, 0x08	; 8
    1a8e:	51 f1       	breq	.+84     	; 0x1ae4 <__ultoa_invert+0x5c>
    1a90:	20 31       	cpi	r18, 0x10	; 16
    1a92:	81 f1       	breq	.+96     	; 0x1af4 <__ultoa_invert+0x6c>
    1a94:	e8 94       	clt
    1a96:	6f 93       	push	r22
    1a98:	6e 7f       	andi	r22, 0xFE	; 254
    1a9a:	6e 5f       	subi	r22, 0xFE	; 254
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	af 4f       	sbci	r26, 0xFF	; 255
    1aa4:	b1 e0       	ldi	r27, 0x01	; 1
    1aa6:	3e d0       	rcall	.+124    	; 0x1b24 <__ultoa_invert+0x9c>
    1aa8:	b4 e0       	ldi	r27, 0x04	; 4
    1aaa:	3c d0       	rcall	.+120    	; 0x1b24 <__ultoa_invert+0x9c>
    1aac:	67 0f       	add	r22, r23
    1aae:	78 1f       	adc	r23, r24
    1ab0:	89 1f       	adc	r24, r25
    1ab2:	9a 1f       	adc	r25, r26
    1ab4:	a1 1d       	adc	r26, r1
    1ab6:	68 0f       	add	r22, r24
    1ab8:	79 1f       	adc	r23, r25
    1aba:	8a 1f       	adc	r24, r26
    1abc:	91 1d       	adc	r25, r1
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	6a 0f       	add	r22, r26
    1ac2:	71 1d       	adc	r23, r1
    1ac4:	81 1d       	adc	r24, r1
    1ac6:	91 1d       	adc	r25, r1
    1ac8:	a1 1d       	adc	r26, r1
    1aca:	20 d0       	rcall	.+64     	; 0x1b0c <__ultoa_invert+0x84>
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <__ultoa_invert+0x48>
    1ace:	68 94       	set
    1ad0:	3f 91       	pop	r19
    1ad2:	2a e0       	ldi	r18, 0x0A	; 10
    1ad4:	26 9f       	mul	r18, r22
    1ad6:	11 24       	eor	r1, r1
    1ad8:	30 19       	sub	r19, r0
    1ada:	30 5d       	subi	r19, 0xD0	; 208
    1adc:	31 93       	st	Z+, r19
    1ade:	de f6       	brtc	.-74     	; 0x1a96 <__ultoa_invert+0xe>
    1ae0:	cf 01       	movw	r24, r30
    1ae2:	08 95       	ret
    1ae4:	46 2f       	mov	r20, r22
    1ae6:	47 70       	andi	r20, 0x07	; 7
    1ae8:	40 5d       	subi	r20, 0xD0	; 208
    1aea:	41 93       	st	Z+, r20
    1aec:	b3 e0       	ldi	r27, 0x03	; 3
    1aee:	0f d0       	rcall	.+30     	; 0x1b0e <__ultoa_invert+0x86>
    1af0:	c9 f7       	brne	.-14     	; 0x1ae4 <__ultoa_invert+0x5c>
    1af2:	f6 cf       	rjmp	.-20     	; 0x1ae0 <__ultoa_invert+0x58>
    1af4:	46 2f       	mov	r20, r22
    1af6:	4f 70       	andi	r20, 0x0F	; 15
    1af8:	40 5d       	subi	r20, 0xD0	; 208
    1afa:	4a 33       	cpi	r20, 0x3A	; 58
    1afc:	18 f0       	brcs	.+6      	; 0x1b04 <__ultoa_invert+0x7c>
    1afe:	49 5d       	subi	r20, 0xD9	; 217
    1b00:	31 fd       	sbrc	r19, 1
    1b02:	40 52       	subi	r20, 0x20	; 32
    1b04:	41 93       	st	Z+, r20
    1b06:	02 d0       	rcall	.+4      	; 0x1b0c <__ultoa_invert+0x84>
    1b08:	a9 f7       	brne	.-22     	; 0x1af4 <__ultoa_invert+0x6c>
    1b0a:	ea cf       	rjmp	.-44     	; 0x1ae0 <__ultoa_invert+0x58>
    1b0c:	b4 e0       	ldi	r27, 0x04	; 4
    1b0e:	a6 95       	lsr	r26
    1b10:	97 95       	ror	r25
    1b12:	87 95       	ror	r24
    1b14:	77 95       	ror	r23
    1b16:	67 95       	ror	r22
    1b18:	ba 95       	dec	r27
    1b1a:	c9 f7       	brne	.-14     	; 0x1b0e <__ultoa_invert+0x86>
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	61 05       	cpc	r22, r1
    1b20:	71 05       	cpc	r23, r1
    1b22:	08 95       	ret
    1b24:	9b 01       	movw	r18, r22
    1b26:	ac 01       	movw	r20, r24
    1b28:	0a 2e       	mov	r0, r26
    1b2a:	06 94       	lsr	r0
    1b2c:	57 95       	ror	r21
    1b2e:	47 95       	ror	r20
    1b30:	37 95       	ror	r19
    1b32:	27 95       	ror	r18
    1b34:	ba 95       	dec	r27
    1b36:	c9 f7       	brne	.-14     	; 0x1b2a <__ultoa_invert+0xa2>
    1b38:	62 0f       	add	r22, r18
    1b3a:	73 1f       	adc	r23, r19
    1b3c:	84 1f       	adc	r24, r20
    1b3e:	95 1f       	adc	r25, r21
    1b40:	a0 1d       	adc	r26, r0
    1b42:	08 95       	ret

00001b44 <strrev>:
    1b44:	dc 01       	movw	r26, r24
    1b46:	fc 01       	movw	r30, r24
    1b48:	67 2f       	mov	r22, r23
    1b4a:	71 91       	ld	r23, Z+
    1b4c:	77 23       	and	r23, r23
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <strrev+0x4>
    1b50:	32 97       	sbiw	r30, 0x02	; 2
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <strrev+0x18>
    1b54:	7c 91       	ld	r23, X
    1b56:	6d 93       	st	X+, r22
    1b58:	70 83       	st	Z, r23
    1b5a:	62 91       	ld	r22, -Z
    1b5c:	ae 17       	cp	r26, r30
    1b5e:	bf 07       	cpc	r27, r31
    1b60:	c8 f3       	brcs	.-14     	; 0x1b54 <strrev+0x10>
    1b62:	08 95       	ret

00001b64 <_exit>:
    1b64:	f8 94       	cli

00001b66 <__stop_program>:
    1b66:	ff cf       	rjmp	.-2      	; 0x1b66 <__stop_program>
